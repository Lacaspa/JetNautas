// -- user code here --		var musicEnabled = true;	var fxEnabled = true;/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * Level2.
 */
function Level2() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level2_proto = Object.create(Phaser.State.prototype);
Level2.prototype = Level2_proto;
Level2.prototype.constructor = Level2;

Level2.prototype.init = function () {
	
	this.myInit();
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	
};

Level2.prototype.preload = function () {
	
	this.myPreload();
	
	this.load.pack('graphics', 'assets/pack.json');
	this.load.pack('Fonts', 'assets/pack.json');
	this.load.pack('animations', 'assets/pack.json');
	
};

Level2.prototype.create = function () {
	this.add.sprite(0.0, 0.0, 'newBackground');
	
	var _elevatorPipe = this.add.sprite(74.0, 382.0, 'elevatorPipe');
	
	this.add.sprite(-7.0, 1507.0, 'newBackground2');
	
	var _groupCheer = this.add.group();
	
	var _prizeBanner = this.add.sprite(-5.0, -128.0, 'prizeBanner', null, _groupCheer);
	
	var _cheerUpText = this.add.bitmapText(172.0, -89.0, 'PixelFont', 'Excelent', 64, _groupCheer);
	
	var _sewer = this.add.group();
	_sewer.position.set(167.0, 0.0);
	
	var _zombieZewer1 = this.add.sprite(908.0, 448.0, 'zombieZewer', null, _sewer);
	_zombieZewer1.scale.set(1.0, 0.5);
	
	var _zombieZewer2 = this.add.sprite(909.0, 755.0, 'zombieZewer', null, _sewer);
	_zombieZewer2.scale.set(1.0, 0.5);
	
	var _zombieZewer3 = this.add.sprite(910.0, 1067.0, 'zombieZewer', null, _sewer);
	_zombieZewer3.scale.set(1.0, 0.5);
	
	var _platforms = this.add.group();
	_platforms.position.set(56.0, 401.0);
	
	var _floor = this.add.sprite(-235.0, 1111.0, 'floor21', null, _platforms);
	this.game.physics.arcade.enable(_floor);
	_floor.body.immovable = true;
	
	var _bigWall = this.add.sprite(1196.0, -450.0, 'bigWall', null, _platforms);
	_bigWall.scale.set(1.0, 3.0);
	_bigWall.alpha = 0.0;
	this.game.physics.arcade.enable(_bigWall);
	_bigWall.body.setSize(28.0, 926.2138671875, 0.0, -6.0);
	_bigWall.body.moves = false;
	_bigWall.body.immovable = true;
	
	var _bigWall1 = this.add.sprite(-60.0, -669.0, 'bigWall', null, _platforms);
	_bigWall1.scale.set(1.0, 3.0);
	_bigWall1.alpha = 0.0;
	this.game.physics.arcade.enable(_bigWall1);
	_bigWall1.body.setSize(28.0, 926.2138671875, 0.0, -6.0);
	_bigWall1.body.moves = false;
	_bigWall1.body.immovable = true;
	
	var _separatingWall = this.add.sprite(1153.0, 50.0, 'separatingWall', null, _platforms);
	this.game.physics.arcade.enable(_separatingWall);
	_separatingWall.body.moves = false;
	_separatingWall.body.immovable = true;
	
	var _separatingWall2 = this.add.sprite(1155.0, 360.0, 'separatingWall', null, _platforms);
	this.game.physics.arcade.enable(_separatingWall2);
	_separatingWall2.body.immovable = true;
	_separatingWall2.body.collideWorldBounds = true;
	
	var _separatingWall3 = this.add.sprite(1163.0, 668.0, 'separatingWall', null, _platforms);
	this.game.physics.arcade.enable(_separatingWall3);
	_separatingWall3.body.immovable = true;
	_separatingWall3.body.collideWorldBounds = true;
	
	var _thaCeiling = this.add.sprite(137.0, -63.0, 'thaCeiling', null, _platforms);
	this.game.physics.arcade.enable(_thaCeiling);
	_thaCeiling.body.moves = false;
	_thaCeiling.body.immovable = true;
	
	var _floorNew = this.add.sprite(283.0, 313.0, 'floorNew', null, _platforms);
	this.game.physics.arcade.enable(_floorNew);
	_floorNew.body.moves = false;
	_floorNew.body.immovable = true;
	
	var _floorNew2 = this.add.sprite(283.0, 622.0, 'floorNew', null, _platforms);
	this.game.physics.arcade.enable(_floorNew2);
	_floorNew2.body.moves = false;
	_floorNew2.body.immovable = true;
	
	var _floorNew3 = this.add.sprite(283.0, 931.0, 'floorNew', null, _platforms);
	this.game.physics.arcade.enable(_floorNew3);
	_floorNew3.body.moves = false;
	_floorNew3.body.immovable = true;
	
	var _ascensor1 = new ascensor(this.game, 95.0, 291.0);
	this.add.existing(_ascensor1);
	
	var _enemies = this.add.group();
	_enemies.position.set(-246.0, -59.0);
	
	var _spawnPoints = this.add.group();
	
	var _spawner2 = this.add.sprite(1361.0, 580.0, 'spawner', null, _spawnPoints);
	_spawner2.renderable = false;
	
	var _spawner3 = this.add.sprite(1358.0, 894.0, 'spawner', null, _spawnPoints);
	_spawner3.renderable = false;
	
	var _spawner4 = this.add.sprite(1356.0, 1199.0, 'spawner', null, _spawnPoints);
	_spawner4.renderable = false;
	
	var _elevators = this.add.group();
	_elevators.position.set(64.0, 402.0);
	
	var _cannons = this.add.group();
	
	var _store = this.add.sprite(184.0, 181.0, 'store');
	this.game.physics.arcade.enable(_store);
	_store.body.setSize(194.69912719726562, 160.0);
	_store.body.moves = false;
	_store.body.immovable = true;
	
	var _menuBtn = this.add.sprite(-1.0, 12.0, 'menuBtn');
	_menuBtn.fixedToCamera = true;
	
	var _shootBtn = this.add.sprite(30.0, 823.0, 'shootBtn');
	_shootBtn.fixedToCamera = true;
	
	var _pickUpButton = this.add.sprite(31.0, 709.0, 'pickUpButton');
	_pickUpButton.fixedToCamera = true;
	
	var _dropCannonBtn = this.add.sprite(150.0, 824.0, 'dropCannonBtn');
	_dropCannonBtn.fixedToCamera = true;
	
	var _enterHouseBtn = this.add.sprite(31.0, 596.0, 'enterHouseBtn');
	_enterHouseBtn.fixedToCamera = true;
	
	var _coins = this.add.group();
	
	var _directions = this.add.group();
	
	var _directionChange3 = this.add.sprite(9.0, 1426.0, 'directionChange', null, _directions);
	this.game.physics.arcade.enable(_directionChange3);
	_directionChange3.body.moves = false;
	_directionChange3.body.immovable = true;
	
	var _storeGroup = this.add.group();
	_storeGroup.position.set(-97.0, 183.0);
	
	var _yourMoney = this.add.text(173.0, 58.0, '0000', {"font":"bold 20px Arial","fill":"#f0f0f0","align":"center"}, _storeGroup);
	_yourMoney.fixedToCamera = true;
	
	var _storeBackground = this.add.sprite(97.0, -200.0, 'storeBackground', null, _storeGroup);
	_storeBackground.fixedToCamera = true;
	
	var _buySlot = this.add.group(_storeGroup);
	_buySlot.position.set(0.0, 9.0);
	
	var _gunBuyBtn = this.add.sprite(148.0, 203.0, 'gunBuyBtn', null, _buySlot);
	_gunBuyBtn.fixedToCamera = true;
	
	var _cannonBuyBtn = this.add.sprite(150.0, 293.0, 'cannonBuyBtn', null, _buySlot);
	_cannonBuyBtn.fixedToCamera = true;
	
	this.add.text(219.0, 220.0, '10', {"font":"bold 20px Arial","fill":"#f0f0f0"}, _buySlot);
	
	this.add.text(221.0, 309.0, '30', {"font":"bold 20px Arial","fill":"#f0f0f0"}, _buySlot);
	
	var _cookSlot = this.add.group(_storeGroup);
	_cookSlot.position.set(0.0, 9.0);
	
	var _pot1 = new smallPot(this.game, 402.0, 349.0);
	_pot1.name = 'pot';
	_cookSlot.add(_pot1);
	
	var _pot2 = new smallPot(this.game, 530.0, 349.0);
	_pot2.name = 'pot';
	_cookSlot.add(_pot2);
	
	var _pot3 = new smallPot(this.game, 662.0, 349.0);
	_pot3.name = 'pot';
	_cookSlot.add(_pot3);
	
	var _bigBtn = new bigBtn(this.game, 533.0, 473.0);
	_bigBtn.name = 'bigPot';
	_cookSlot.add(_bigBtn);
	
	var _flavorSlot = this.add.group(_storeGroup);
	_flavorSlot.position.set(0.0, -8.0);
	
	var _flavorPot4 = this.add.sprite(363.0, 573.0, 'emptyBtn', null, _flavorSlot);
	
	var _flavorPot5 = this.add.sprite(494.0, 573.0, 'emptyBtn', null, _flavorSlot);
	
	var _flavorPot6 = this.add.sprite(623.0, 573.0, 'emptyBtn', null, _flavorSlot);
	
	var _flavorPot1 = this.add.sprite(356.0, 180.0, 'emptyBtn', null, _flavorSlot);
	
	var _flavorPot2 = this.add.sprite(487.0, 180.0, 'emptyBtn', null, _flavorSlot);
	
	var _flavorPot3 = this.add.sprite(619.0, 180.0, 'emptyBtn', null, _flavorSlot);
	
	var _bannaFlavor = this.add.sprite(664.0, 221.0, 'bannaFlavor', null, _flavorSlot);
	_bannaFlavor.anchor.set(0.5, 0.5);
	this.game.physics.arcade.enable(_bannaFlavor);
	_bannaFlavor.body.setSize(36.0, 36.0, 13.0, 9.0);
	
	var _lemonFlavor = this.add.sprite(532.0, 219.0, 'lemonFlavor', null, _flavorSlot);
	_lemonFlavor.anchor.set(0.5, 0.5);
	this.game.physics.arcade.enable(_lemonFlavor);
	_lemonFlavor.body.setSize(36.0, 36.0, 13.0, 9.0);
	_lemonFlavor.body.moves = false;
	
	var _straberryFlavor = this.add.sprite(399.0, 222.0, 'straberryFlavor', null, _flavorSlot);
	_straberryFlavor.anchor.set(0.5, 0.5);
	this.game.physics.arcade.enable(_straberryFlavor);
	_straberryFlavor.body.setSize(36.0, 36.0, 13.0, 9.0);
	_straberryFlavor.body.moves = false;
	
	var _flavor1 = this.add.text(404.0, 273.0, '2', {"font":"bold 15px Arial","fill":"#f0f0f0"}, _flavorSlot);
	
	var _flavor2 = this.add.text(526.0, 272.0, '2', {"font":"bold 15px Arial","fill":"#f0f0f0"}, _flavorSlot);
	
	var _flavor3 = this.add.text(654.0, 273.0, '2', {"font":"bold 15px Arial","fill":"#f0f0f0"}, _flavorSlot);
	
	var _flavor4 = this.add.text(406.0, 674.0, '2', {"font":"bold 15px Arial","fill":"#f0f0f0"}, _flavorSlot);
	
	var _flavor5 = this.add.text(533.0, 670.0, '2', {"font":"bold 15px Arial","fill":"#f0f0f0"}, _flavorSlot);
	
	var _flavor6 = this.add.text(657.0, 676.0, '2', {"font":"bold 15px Arial","fill":"#f0f0f0"}, _flavorSlot);
	
	var _chocolateCore = this.add.sprite(404.0, 614.0, 'chocolateCore', null, _flavorSlot);
	_chocolateCore.anchor.set(0.5, 0.5);
	this.game.physics.arcade.enable(_chocolateCore);
	_chocolateCore.body.setSize(36.0, 36.0, 13.0, 9.0);
	
	var _chiliCore = this.add.sprite(539.0, 613.0, 'chiliCore', null, _flavorSlot);
	_chiliCore.anchor.set(0.5, 0.5);
	this.game.physics.arcade.enable(_chiliCore);
	_chiliCore.body.setSize(36.0, 36.0, 13.0, 9.0);
	
	var _cherryCore = this.add.sprite(668.0, 612.0, 'cherryCore', null, _flavorSlot);
	_cherryCore.anchor.set(0.5, 0.5);
	this.game.physics.arcade.enable(_cherryCore);
	_cherryCore.body.setSize(36.0, 36.0, 13.0, 9.0);
	
	var _candyReady = this.add.group(_storeGroup);
	
	var _exitHouseBtn = this.add.sprite(32.0, 596.0, 'exitHouseBtn');
	_exitHouseBtn.fixedToCamera = true;
	
	var _clientes = this.add.group();
	_clientes.position.set(-665.0, 0.0);
	
	var _cliente = new client1(this.game, 1174.0, 289.0);
	_clientes.add(_cliente);
	
	var _cliente2 = new client1(this.game, 1372.0, 291.0);
	_clientes.add(_cliente2);
	
	var _Player = new player(this.game, 290.0, 292.0);
	this.add.existing(_Player);
	
	var _elevatorInn = this.add.sprite(33.0, 595.0, 'elevatorInn');
	_elevatorInn.fixedToCamera = true;
	
	var _elevatorOut = this.add.sprite(33.0, 595.0, 'elevatorOut');
	_elevatorOut.fixedToCamera = true;
	
	var _coin = this.add.sprite(485.0, 29.0, 'atlas4', 'coin0000');
	_coin.fixedToCamera = true;
	
	var _moneyCount = this.add.text(533.0, 26.0, '0000', {"font":"bold 40px Arial","fill":"#ffffff"});
	_moneyCount.fixedToCamera = true;
	
	var _deathBar = this.add.sprite(1129.0, 1617.0, 'floor3');
	this.game.physics.arcade.enable(_deathBar);
	_deathBar.body.moves = false;
	_deathBar.body.immovable = true;
	
	var _ordersFlavor = this.add.group();
	
	var _ordersBG = this.add.group(_ordersFlavor);
	
	var _clientReady = this.add.group();
	_clientReady.position.set(-650.0, 0.0);
	
	
	
	// fields
	
	this.fElevatorPipe = _elevatorPipe;
	this.fGroupCheer = _groupCheer;
	this.fPrizeBanner = _prizeBanner;
	this.fCheerUpText = _cheerUpText;
	this.fPlatforms = _platforms;
	this.fAscensor1 = _ascensor1;
	this.fEnemies = _enemies;
	this.fSpawnPoints = _spawnPoints;
	this.fSpawner2 = _spawner2;
	this.fSpawner3 = _spawner3;
	this.fSpawner4 = _spawner4;
	this.fElevators = _elevators;
	this.fCannons = _cannons;
	this.fStore = _store;
	this.fMenuBtn = _menuBtn;
	this.fShootBtn = _shootBtn;
	this.fPickUpButton = _pickUpButton;
	this.fDropCannonBtn = _dropCannonBtn;
	this.fEnterHouseBtn = _enterHouseBtn;
	this.fCoins = _coins;
	this.fDirections = _directions;
	this.fStoreGroup = _storeGroup;
	this.fYourMoney = _yourMoney;
	this.fGunBuyBtn = _gunBuyBtn;
	this.fCannonBuyBtn = _cannonBuyBtn;
	this.fCookSlot = _cookSlot;
	this.fBigBtn = _bigBtn;
	this.fFlavorSlot = _flavorSlot;
	this.fFlavorPot4 = _flavorPot4;
	this.fFlavorPot5 = _flavorPot5;
	this.fFlavorPot6 = _flavorPot6;
	this.fFlavorPot1 = _flavorPot1;
	this.fFlavorPot2 = _flavorPot2;
	this.fFlavorPot3 = _flavorPot3;
	this.fBannaFlavor = _bannaFlavor;
	this.fLemonFlavor = _lemonFlavor;
	this.fStraberryFlavor = _straberryFlavor;
	this.fFlavor1 = _flavor1;
	this.fFlavor2 = _flavor2;
	this.fFlavor3 = _flavor3;
	this.fFlavor4 = _flavor4;
	this.fFlavor5 = _flavor5;
	this.fFlavor6 = _flavor6;
	this.fChocolateCore = _chocolateCore;
	this.fChiliCore = _chiliCore;
	this.fCherryCore = _cherryCore;
	this.fCandyReady = _candyReady;
	this.fExitHouseBtn = _exitHouseBtn;
	this.fClientes = _clientes;
	this.fPlayer = _Player;
	this.fElevatorInn = _elevatorInn;
	this.fElevatorOut = _elevatorOut;
	this.fMoneyCount = _moneyCount;
	this.fDeathBar = _deathBar;
	this.fOrdersFlavor = _ordersFlavor;
	this.fOrdersBG = _ordersBG;
	this.fClientReady = _clientReady;
	
	
	this.myCreate();
	
};

/* --- end generated code --- */// -- user code here --Level2.prototype.myInit = function () {	};Level2.prototype.myPreload = function () {	this.game.load.audio('jumpBall', ['assets/audio/jump.mp3','assets/audio/jump.ogg']);			this.game.load.audio('BgMusic', ['assets/audio/BgMusic.mp3','assets/audio/BgMusic.ogg']);	this.game.load.audio('BgMusic2', ['assets/audio/BgMusic2.mp3','assets/audio/BgMusic2.ogg']);	this.game.load.audio('sonidoLevel', ['assets/audio/sonidoLevel.mp3','assets/audio/sonidoLevel.ogg']);	this.game.load.audio('shoot', ['assets/audio/shoot.mp3','assets/audio/shoot.ogg']);		this.game.load.audio('zombieWound1', ['assets/audio/zombieWound1.mp3','assets/audio/zombieWound1.ogg']);	this.game.load.audio('zombieWound2', ['assets/audio/zombieWound2.mp3','assets/audio/zombieWound2.ogg']);	this.game.load.audio('zombieWound3', ['assets/audio/zombieWound3.mp3','assets/audio/zombieWound3.ogg']);	this.game.load.audio('zombieWound4', ['assets/audio/zombieWound4.mp3','assets/audio/zombieWound4.ogg']);		this.game.load.audio('brainsAudio', ['assets/audio/brainsAudio.mp3','assets/audio/brainsAudio.ogg']);	this.game.load.audio('getCoin', ['assets/audio/getCoin.mp3','assets/audio/getCoin.ogg']);	this.game.load.audio('gotIngredient', ['assets/audio/gotIngredient.mp3','assets/audio/gotIngredient.ogg']);};Level2.prototype.switchMusic = function () {		if(musicEnabled){		BgMusic.pause();		BgMusic2.pause();		musicEnabled = false;		console.log('musica disabled');			}else{			if(this.BgMusic = 1){			BgMusic.play();		}else{			BgMusic2.stop();		}				musicEnabled = true;			console.log('musica musicEnabled');	}	};Level2.prototype.switchFX = function () {		if(fxEnabled){	this.fxSounds.forEach(function(soundFx) { 			soundFx.mute = true;	},this);		fxEnabled = false;		console.log('fx disabled');			}else{		this.fxSounds.forEach(function(soundFx) { 		soundFx.mute = false;	},this);					fxEnabled = true;		console.log('fx enabled');	}	};Level2.prototype.manejarPausa = function () {  this.game.paused = true;       	var pauseBg = this.game.add.graphics(0, 0);				pauseBg.beginFill(0x2E610B, 0.6); 	    pauseBg.moveTo(this.game.camera.x,this.game.camera.y);	    pauseBg.lineTo(this.game.camera.x+this.game.camera.width, this.game.camera.y);	    pauseBg.lineTo(this.game.camera.x+this.game.camera.width, this.game.camera.y+this.game.camera.height);	    pauseBg.lineTo(this.game.camera.x, this.game.camera.y+this.game.camera.height);	    pauseBg.lineTo(this.game.camera.x,this.game.camera.y);	    pauseBg.endFill();	    this.Bg = this.game.add.sprite(this.game.camera.x, this.game.camera.y, pauseBg.generateTexture());	    pauseBg.destroy();	    var pauseBgMenu = this.game.add.graphics(this.game.camera.x,this.game.camera.y);	    pauseBgMenu.beginFill(0x2E610B); 	    pauseBgMenu.moveTo(0,0);	    pauseBgMenu.lineTo(524, 0);	    pauseBgMenu.lineTo(524, 330);	    pauseBgMenu.lineTo(0, 330);	    pauseBgMenu.lineTo(0, 0);	    pauseBgMenu.endFill();	    this.pauseBgMenu = this.game.add.sprite(this.game.camera.x+this.game.camera.width/2, this.game.camera.y+this.game.camera.height/2, pauseBgMenu.generateTexture());	    this.pauseBgMenu.anchor.setTo(0.5);	    pauseBgMenu.destroy();	    this.pauseIcons = this.game.add.sprite(this.game.camera.x+0, this.game.camera.y+180, 'pauseIcons');	    this.OnBtn = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+360, 'OnBtn');		this.OffMusic = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+360, 'OffBtn');		this.OnFx = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+430, 'OnBtn');		this.OffFx = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+430, 'OffBtn');		this.HowToPlayBtn = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+500, 'HowToPlayBtn');		this.QuitBtn = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+570, 'QuitBtn');		if(musicEnabled){							  		this.OnBtn.visible = true;							   		this.OffMusic.visible = false;							   }else{								   	this.OnBtn.visible = false;								   	this.OffMusic.visible = true;							   }		if(fxEnabled){							  		this.OnFx.visible = true;							   		this.OffFx.visible = false;							   }else{								   	this.OnFx.visible = false;								   	this.OffFx.visible = true;							   }}Level2.prototype.unpause = function (event) {  if(this.game.paused){			  	var x1 = (this.state.getCurrentState﻿().pauseBgMenu.x-this.game.camera.x) - this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		x2 = (this.state.getCurrentState﻿().pauseBgMenu.x-this.game.camera.x) + this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		y1 = (this.state.getCurrentState﻿().pauseBgMenu.y-this.game.camera.y) - this.state.getCurrentState﻿().pauseBgMenu.height/2;			  		y2 = (this.state.getCurrentState﻿().pauseBgMenu.y-this.game.camera.y) + this.state.getCurrentState﻿().pauseBgMenu.height/2;			  				  	console.log(x1 + ' ' +x2);			 	console.log(y1 + ' ' +y2);					    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){			    						var mx1 = this.state.getCurrentState﻿().OffMusic.x-this.game.camera.x							mx2 = this.state.getCurrentState﻿().OffMusic.x-this.game.camera.x + this.state.getCurrentState﻿().OffMusic.width;							my1 = this.state.getCurrentState﻿().OffMusic.y-this.game.camera.y							my2 = this.state.getCurrentState﻿().OffMusic.y-this.game.camera.y + this.state.getCurrentState﻿().OffMusic.height;						var fx1 = this.state.getCurrentState﻿().OnFx.x-this.game.camera.x;							fx2 = this.state.getCurrentState﻿().OnFx.x-this.game.camera.x + this.state.getCurrentState﻿().OnFx.width;							fy1 = this.state.getCurrentState﻿().OnFx.y-this.game.camera.y;							fy2 = this.state.getCurrentState﻿().OnFx.y-this.game.camera.y + this.state.getCurrentState﻿().OnFx.height;						var hx1 = this.state.getCurrentState﻿().HowToPlayBtn.x-this.game.camera.x;							hx2 = this.state.getCurrentState﻿().HowToPlayBtn.x-this.game.camera.x + this.state.getCurrentState﻿().HowToPlayBtn.width;							hy1 = this.state.getCurrentState﻿().HowToPlayBtn.y-this.game.camera.y;							hy2 = this.state.getCurrentState﻿().HowToPlayBtn.y-this.game.camera.y + this.state.getCurrentState﻿().HowToPlayBtn.height;						var qx1 = this.state.getCurrentState﻿().QuitBtn.x-this.game.camera.x;							qx2 = this.state.getCurrentState﻿().QuitBtn.x-this.game.camera.x + this.state.getCurrentState﻿().QuitBtn.width;							qy1 = this.state.getCurrentState﻿().QuitBtn.y-this.game.camera.y;							qy2 = this.state.getCurrentState﻿().QuitBtn.y-this.game.camera.y + this.state.getCurrentState﻿().QuitBtn.height;						if(event.x > mx1 && event.x < mx2 && event.y > my1 && event.y < my2 ){ //boton de musica																  if(musicEnabled){									this.OnBtn.visible = false;							   		this.OffMusic.visible = true;							   								   }else{								   	this.OnBtn.visible = true;								   	this.OffMusic.visible = false;							   }	    										this.state.getCurrentState﻿().switchMusic(); 													}					if(event.x > fx1 && event.x < fx2 && event.y > fy1 && event.y < fy2 ){ //boton de fx																  if(fxEnabled){									this.OnFx.visible = false;							   		this.OffFx.visible = true;							   								   }else{								   	this.OnFx.visible = true;								   	this.OffFx.visible = false;							   }	    														this.state.getCurrentState﻿().switchFX(); 													}					if(event.x > hx1 && event.x < hx2 && event.y > hy1 && event.y < hy2 ){ //boton de how to play															this.game.cache.removeSound('BgMusic');						this.game.cache.removeSound('BgMusic2');						this.game.state.start('Instructions');						this.game.paused = false;									}					if(event.x > qx1 && event.x < qx2 && event.y > qy1 && event.y < qy2 ){ //boton de salir									console.log('quiting');						location.reload();									}			    	  }else{   				   				this.game.paused = false;			  	this.state.getCurrentState﻿().Bg.destroy();			  	this.state.getCurrentState﻿().pauseBgMenu.destroy();			  	this.state.getCurrentState﻿().pauseIcons.destroy();			  	this.state.getCurrentState﻿().OnBtn.destroy();			  	this.state.getCurrentState﻿().OffMusic.destroy();			  	this.state.getCurrentState﻿().OnFx.destroy();			  	this.state.getCurrentState﻿().OffFx.destroy();			  	this.state.getCurrentState﻿().HowToPlayBtn.destroy();			  	this.state.getCurrentState﻿().QuitBtn.destroy();			  }			  }}this.wannaShoot = false;Level2.prototype.swipeUpAction = function (pointer) {			this.swipeCoordX2 = pointer.x;  			this.swipeCoordY2 = pointer.y; 			if(this.insideElevator){				console.log('insideElevator');				this.elevatorPowerY = this.swipeCoordY - this.swipeCoordY2;				this.elevatorPowerX = this.swipeCoordX - this.swipeCoordX2;				console.log(this.elevatorPowerX);				if(Math.abs(this.elevatorPowerY)<=30){ //detener el ascensor si el swipe no fue muy fuerte					this.elevatorPowerY=0;					this.fAscensor1.body.velocity.y=0				}				if(Math.abs(this.elevatorPowerX) >=  100 ){ //tratar de salir de ascensor con swipe					this.elevatorPowerY=0;					this.fAscensor1.body.velocity.y=0					this.exitElevator();				}												this.fAscensor1.body.velocity.y-=200 * Math.sign(this.elevatorPowerY); //velocidad del ascensor			}else{				var margenBalon = 60; 				this.fPlayer.body.drag.x=0;								this.PowerX = Math.abs(this.swipeCoordX - this.swipeCoordX2);				this.fPlayer.animations.play('walking');							if(this.PowerX >= this.maxPowerX){								this.fPlayer.animations.play('running');								this.PowerX = this.maxPowerX;							}else if(this.PowerX==0){								this.fPlayer.animations.play('idle');								if(this.wannaShoot){										//this.fPlayer.animations.play('shoot');										this.wannaShoot = false;								}								this.wannaShoot = true;							}							this.DirX = Math.sign(this.swipeCoordX - this.swipeCoordX2);								this.VectorX = this.DirX * this.PowerX;																												if(!this.jumping && !this.doubleJumping ){																	this.PowerY = Math.abs(this.swipeCoordY - this.swipeCoordY2);																}else if(this.doubleJump){																								this.PowerY = Math.abs(this.swipeCoordY - this.swipeCoordY2);							}else{								this.PowerY = 0;								if(this.jumping){										this.fPlayer.animations.play('jumping');								}else{									this.fPlayer.animations.play('idle');								}															}							this.DirY = Math.sign(this.swipeCoordY - this.swipeCoordY2);								this.VectorY = this.DirY * this.PowerY;														if( this.PowerY > this.minJumpIntention && this.DirY == 1){ //si tiene intencion de salto								jumpBall.play('jumpBall');								this.fPlayer.animations.play('jumping2');								this.wannaJump = true;															}							//console.log('vector y ' + this.VectorY);							if(this.elevatorColliding && this.VectorY < -60){ //intencion de salir del ascensor							this.enterElevator();														}							if(this.VectorX!=0){																	if(this.VectorX<0){											this.fPlayer.scale.x = 1;										}else{											this.fPlayer.scale.x = -1;										}																}							this.fPlayer.body.velocity.x = -this.VectorX*this.ExtraPowerX;			}												}Level2.prototype.onDragFlavor = function () {	console.log('draggin a flavor');}Level2.prototype.onStopDragFlavor = function (item) {console.log(this.pot);	var isFlavorColliding =  item.game.physics.arcade.overlap(item, item.game.state.getCurrentState﻿().fCookSlot, item.game.state.getCurrentState﻿().leaveFlavor)				if(!isFlavorColliding){			this.game.state.getCurrentState﻿().puff(item.x,item.y);			//item.destroy();			var bounce=item.game.add.tween(item);			bounce.to({x:this.pot.x+35, y: this.pot.y+35 }, 500, Phaser.Easing.Bounce.Out);			bounce.start();				}}Level2.prototype.leaveFlavor = function (flavor, cookingPot) {		switch (flavor.key){		case 'straberryFlavor':				cookingPot.game.state.getCurrentState﻿().soltarStraberry = true;		break;		case 'lemonFlavor':			cookingPot.game.state.getCurrentState﻿().soltarLemon = true;		break;		case 'bannaFlavor':			cookingPot.game.state.getCurrentState﻿().soltarBanana = true;		break;		case 'chocolateCore':			cookingPot.game.state.getCurrentState﻿().soltarChocolate = true;		break;		case 'chiliCore':			cookingPot.game.state.getCurrentState﻿().soltarChilli = true;		break;		case 'cherryCore':			cookingPot.game.state.getCurrentState﻿().soltarCherry = true;		break;	}	console.log('cookingPot.myItemsCooking ' + cookingPot.myItemsCooking);if(cookingPot.name == 'pot' && flavor.key=='straberryFlavor' || cookingPot.name == 'pot' && flavor.key=='lemonFlavor' || cookingPot.name == 'pot' && flavor.key=='bannaFlavor' ){			cookingPot.myItemsCooking++;	if(cookingPot.myItemsCooking>1){		console.log('killing flavor');		flavor.kill();		flavor.game.state.getCurrentState﻿().puff(flavor.x,flavor.y);	}else{		dropFlavor('flavor');	}			}else{				if(cookingPot.name == 'bigPot' && flavor.key == 'chocolateCore' || cookingPot.name == 'bigPot' &&  flavor.key == 'chiliCore' || cookingPot.name == 'bigPot' &&  flavor.key == 'cherryCore'){													dropFlavor('core');				}else{										flavor.kill();							flavor.game.state.getCurrentState﻿().puff(flavor.x,flavor.y);				}				}	function dropFlavor(cookingType){		console.log('cookingType ' + cookingType);			var bounce=flavor.game.add.tween(flavor);			bounce.to({ y: cookingPot.y }, 500, Phaser.Easing.Bounce.Out);			bounce.start();			flavor.x = cookingPot.x;			flavor.inputEnabled = false;			console.log('im here');			if(cookingType == 'flavor'){					if(!Number.isNaN(cookingPot.myItemsCooking)){								var cooking =  cookingPot.animations.play('cooking');								cooking.onComplete.addOnce(flavor.game.state.getCurrentState﻿().cookingComplete, {game:this,flavor:flavor,cookingPot:cookingPot});															}			}			if(cookingType == 'core'){					//Level2.prototype.makeRecipe = function (candyShape, bigPot) 					if(cookingPot.core == 'none'){						cookingPot.core = flavor.key; //asigno el core						cookingPot.coreFlavor = flavor; //asigno el objeto						flavor.game.state.getCurrentState﻿().makeRecipe(flavor,cookingPot);					}else{						console.log('already a core');						flavor.kill();						flavor.game.state.getCurrentState﻿().puff(flavor.x,flavor.y);					}				}			}	}Level2.prototype.cookingComplete = function (item) { //cuando terminan de hacerse los sabores 	console.log('cooking complete');	console.log(this.flavor.key);	this.flavor.kill();	//item.myItemsCooking--;	item.animations.play('done');	switch(this.flavor.key){	case 'straberryFlavor':		var flavorDone = item.game.add.sprite(item.position.x, item.position.y, 'straberryDone', null, item.game.state.getCurrentState﻿().fCookSlot);	break;	case 'lemonFlavor':		var flavorDone = item.game.add.sprite(item.position.x, item.position.y, 'lemonDone', null, item.game.state.getCurrentState﻿().fCookSlot);	break;	case 'bannaFlavor':	var flavorDone = item.game.add.sprite(item.position.x, item.position.y, 'bananaDone', null, item.game.state.getCurrentState﻿().fCookSlot);	break;}	item.game.physics.arcade.enable(flavorDone); //crear sabores segun el flavor.key	flavorDone.body.moves = false;	var bounce=flavorDone.game.add.tween(flavorDone);	bounce.to({ y: flavorDone.y-20 }, 500, Phaser.Easing.Bounce.Out);			    //bounce.onComplete.add(startBounceTween, this);	bounce.start();	flavorDone.anchor.setTo(0.5,0.5);	flavorDone.inputEnabled =  true;	flavorDone.input.enableDrag(true);	flavorDone.events.onDragStart.add(item.game.state.getCurrentState﻿().onDragToBigPot, {game:this,pot:item});	flavorDone.events.onDragStop.add(item.game.state.getCurrentState﻿().onStopToBigPot, {game:this,pot:item});}Level2.prototype.onDragToBigPot = function (item) {this.pot.myItemsCooking = 0;}Level2.prototype.onStopToBigPot = function (item) { //soltar objetos en el boton grande	console.log('watafaca ' + item.key)		if(item.key=='straberryDone' || item.key=='lemonDone' ||  item.key=='bananaDone' ){					if(item.game.state.getCurrentState﻿().fBigBtn.flavor == 'none' ){		item.inputEnabled =  false;				item.game.state.getCurrentState﻿().fBigBtn.flavor = item.key; //asigno el sabor		item.game.state.getCurrentState﻿().fBigBtn.ingredientFlavor = item; //coloco el objeto		var isCookedColliding =  item.game.physics.arcade.overlap(item, item.game.state.getCurrentState﻿().fBigBtn, item.game.state.getCurrentState﻿().makeRecipe);				if(!isCookedColliding){					item.kill();									item.game.state.getCurrentState﻿().fBigBtn.flavor = 'none'; //asigno el sabor					item.game.state.getCurrentState﻿().fBigBtn.ingredientFlavor = 'none'; //coloco el objeto				}		}else{				item.game.state.getCurrentState﻿().puff(item.x,item.y);				item.kill();							}		}}			Level2.prototype.puff = function (x, y) {		console.log('estoy en poof');				var puff = new poof(this.game, x, y);		this.fCookSlot.add(puff);	}	Level2.prototype.makeRecipe = function (ingredient, bigPot) {	console.log('bigPot.flavor ' + bigPot.flavor);	console.log('bigPot.core ' + bigPot.core);	ingredient.x = bigPot.position.x;	ingredient.y = bigPot.position.y;	if(bigPot.flavor!=='none' && bigPot.core!=='none'){				console.log('trying yo make  a candy');		if(bigPot.flavor == 'straberryDone'){ //sabores straberry			if(bigPot.core == 'chocolateCore'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'strawberryChocolate', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a straberry - chocolateCore candy');			}			if(bigPot.core == 'chiliCore'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'strawberryChilli', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a straberry - chiliCore candy');			}			if(bigPot.core == 'cherryCore'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'strawberryCherry', null, bigPot.game.state.getCurrentState﻿().fCandyReady);								console.log('make a straberry - cherryCore candy');			}		}		if(bigPot.flavor == 'lemonDone'){ //sabores straberry			if(bigPot.core == 'chocolateCore'){								var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'lemonChocolate', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a lemonDone - chocolateCore candy');			}			if(bigPot.core == 'chiliCore'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'lemonChilli', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a lemonDone - chiliCore candy');			}			if(bigPot.core == 'cherryCore'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'lemonCherry', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a lemonDone - cherryCore candy');			}		}		if(bigPot.flavor == 'bananaDone'){ //sabores straberry			if(bigPot.core == 'chocolateCore'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'bannanaChocolate', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a bananaDone - chocolateCore candy');			}			if(bigPot.core == 'chiliCore'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'bannanaChilli', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a bananaDone - chiliCore candy');			}			if(bigPot.core == 'cherryCore'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'bannanaCherry', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a bananaDone - cherryCore candy');			}		}		candyDone.game.physics.arcade.enable(candyDone);				candyDone.anchor.setTo(0.5,0.5);		candyDone.inputEnabled =  false;				candyDone.alpha= 0.5;		var merging = bigPot.animations.play('cooking');		merging.onComplete.addOnce(candyDone.game.state.getCurrentState﻿().mergeComplete, {game:this,flavorMerged:candyDone,cookingPot:bigPot});						bigPot.flavor='none'		bigPot.core='none'		bigPot.ingredientFlavor.kill();		bigPot.coreFlavor.kill();	}}Level2.prototype.mergeComplete = function (item) {	console.log(item);	item.animations.play('done');			var bounce=item.game.add.tween(this.flavorMerged);		    bounce.to({ y: item.y-10 }, 500, Phaser.Easing.Bounce.Out);		    //bounce.onComplete.add(startBounceTween, this);		    bounce.start();	this.flavorMerged.tint = 0xffffff;	this.flavorMerged.alpha= 1;	this.flavorMerged.inputEnabled =  true;	this.flavorMerged.input.enableDrag(true);	this.flavorMerged.events.onDragStop.add(item.game.state.getCurrentState﻿().checkFlavor, {game:this,carameloCreado:this.flavorMerged});}Level2.prototype.checkFlavor = function (item) {	item.game.physics.arcade.collide(item.game.state.getCurrentState﻿().fCandyReady , item.game.state.getCurrentState﻿().fOrdersFlavor, item.game.state.getCurrentState﻿().checkFlavorConOrden, null, this);}Level2.prototype.checkFlavorConOrden = function (caramelo,orden) {	console.log('chequeando orden');	if(orden.saborCreado ==  caramelo.key){		console.log('thats my flavore yeah');		console.log('mi cliente es ' + 	orden.myClientIs);		orden.myClientIs.orderTime =  null;		orden.myOrderFlavor.destroy();		orden.game.state.getCurrentState﻿().fClientReady.add(orden.myClientIs);		orden.myClientIs.body.enable =  true;		orden.myClientIs.meLargo= true;		orden.myClientIs.body.velocity.x=10;		orden.myClientIs.scale.set(-1,1);		orden.myClientIs.animations.play('walk');		orden.game.state.getCurrentState﻿().fPlayer.myCoins+=10;		getCoin.play('getCoin');		orden.destroy();			}else{		console.log('that shit sucks');			}	caramelo.destroy();}Level2.prototype.ordenFallida = function (orden) {		orden.myOrderFlavor.destroy();		this.game.state.getCurrentState﻿().fClientReady.add(orden.myClientIs);		orden.myClientIs.body.enable =  true;		orden.myClientIs.meLargo= true;		orden.myClientIs.body.velocity.x=10;		orden.myClientIs.scale.set(-1,1);		orden.myClientIs.animations.play('walk');		orden.destroy();}Level2.prototype.crearFlavorInstanciaAlone = function (data) {this.offset = 35console.log(data.pot);	switch (data.flavor){			case 'straberry':						var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'straberryFlavor', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);			data.pot.game.state.getCurrentState﻿().fFlavor1.text--;					break;		case 'lemon':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'lemonFlavor', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);						data.pot.game.state.getCurrentState﻿().fFlavor2.text--;					break;		case 'banana':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'bannaFlavor', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);						data.pot.game.state.getCurrentState﻿().fFlavor3.text--;					break;		case 'chocolateCore':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'chocolateCore', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);					data.pot.game.state.getCurrentState﻿().fFlavor4.text--;					break;		case 'chiliCore':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'chiliCore', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);					data.pot.game.state.getCurrentState﻿().fFlavor5.text--;						break;		case 'cherryCore':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'cherryCore', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);						data.pot.game.state.getCurrentState﻿().fFlavor6.text--;						break;	}			data.pot.game.physics.arcade.enable(aFlavor);			aFlavor.body.moves = false;			aFlavor.anchor.setTo(0.5,0.5);			aFlavor.inputEnabled =  true;			aFlavor.input.enableDrag(true);			var bounce=data.pot.game.add.tween(aFlavor);		    bounce.to({ y: data.pot.y+this.offset }, 500, Phaser.Easing.Bounce.Out);		    //bounce.onComplete.add(startBounceTween, this);		    bounce.start();		//	aFlavor.input.startDrag(this.game.input.activePointer);		    aFlavor.events.onDragStart.add(data.pot.game.state.getCurrentState﻿().onDragFlavor, this);    		aFlavor.events.onDragStop.add(data.pot.game.state.getCurrentState﻿().onStopDragFlavor, {game:this,pot:data.pot});	}Level2.prototype.myCreate = function () {	this.fStraberryFlavor.inputEnabled =  true;	this.fStraberryFlavor.input.useHandCursor = true;	//this.fStraberryFlavor.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'straberry',parent:this.fStraberryFlavor});	this.soltarStraberry = true;	this.fLemonFlavor.inputEnabled =  true;	this.fLemonFlavor.input.useHandCursor = true;	//this.fLemonFlavor.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'lemon',parent:this.fLemonFlavor});	this.soltarLemon = true;	this.fBannaFlavor.inputEnabled =  true;	this.fBannaFlavor.input.useHandCursor = true;	//this.fBannaFlavor.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'banana',parent:this.fBannaFlavor});	this.soltarBanana = true;	this.fChocolateCore.inputEnabled =  true;	this.fChocolateCore.input.useHandCursor = true;	//this.fChocolateCore.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'chocolateCore',parent:this.fChocolateCore});	this.soltarChocolate = true;	this.fCherryCore.inputEnabled =  true;	this.fCherryCore.input.useHandCursor = true;	//this.fCherryCore.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'cherryCore',parent:this.fCherryCore});	this.soltarCherry = true;	this.fChiliCore.inputEnabled =  true;	this.fChiliCore.input.useHandCursor = true;	//this.fChiliCore.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'chiliCore',parent:this.fChiliCore});	this.soltarChilli = true;	this.elevatorFloor =  0;	this.insideElevator =  false;	this.fStoreGroup.visible = false;	this.houseColliding = false;	this.cannonCollinding = false;	this.fPickUpButton.visible =  false;	this.fDropCannonBtn.visible = false;	this.fDirections.alpha = 0;	this.game.world.setBounds(0, 0, 1280, 1920);	this.game.camera.follow(this.fPlayer);	    // this.game.camera.deadzone = new Phaser.Rectangle(10, 10, 10, 10);	this.fShootBtn.inputEnabled = true;	this.fShootBtn.input.useHandCursor = true;	this.fShootBtn.events.onInputDown.add(this.shoot, this);	this.fShootBtn.visible =  false;	this.fElevatorInn.inputEnabled = true;	this.fElevatorInn.input.useHandCursor = true;	this.fElevatorInn.events.onInputDown.add(this.enterElevator, this);	this.fElevatorInn.visible =  false;	this.fElevatorOut.inputEnabled = true;	this.fElevatorOut.input.useHandCursor = true;	this.fElevatorOut.events.onInputDown.add(this.exitElevator, this);	this.fElevatorOut.visible =  false;	this.fEnterHouseBtn.inputEnabled = true;	this.fEnterHouseBtn.input.useHandCursor = true;	this.fEnterHouseBtn.events.onInputDown.add(this.enterHouse, this);	this.fEnterHouseBtn.visible = false;	this.fExitHouseBtn.inputEnabled = true;	this.fExitHouseBtn.input.useHandCursor = true;	this.fExitHouseBtn.events.onInputDown.add(this.exitHouse, this);	this.fExitHouseBtn.visible = false;	this.fGunBuyBtn.inputEnabled = true;	this.fGunBuyBtn.input.useHandCursor = true;	this.fGunBuyBtn.events.onInputDown.add(this.buyGun, this);	this.fGunBuyBtn.visible = true;	this.fCannonBuyBtn.inputEnabled = true;	this.fCannonBuyBtn.input.useHandCursor = true;	this.fCannonBuyBtn.events.onInputDown.add(this.buyCannon, this);	this.fCannonBuyBtn.visible = true;	this.fPickUpButton.inputEnabled = true;	this.fPickUpButton.input.useHandCursor = true;	this.fPickUpButton.events.onInputDown.add(this.pickUp, this);	this.fDropCannonBtn.inputEnabled = true;	this.fDropCannonBtn.input.useHandCursor = true;	this.fDropCannonBtn.events.onInputDown.add(this.placeCannon, this);    this.weapon = this.game.add.weapon(40, 'bullet');    this.weapon.setBulletFrames(0, 80, true);    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;    this.weapon.bulletSpeed = 600;    this.weapon.fireRate = 80;     //  this.weapon.trackSprite(this.fPlayer, 0, 0, true);     	this.estoyAbajo = new Phaser.Signal();	this.estoyAbajo.add(this.goinDown, this);	emitter = this.game.add.emitter(0, 0, 20);		this.game.physics.arcade.enable(emitter);	emitter.enableBody=true;    emitter.makeParticles(['candy1','candy2','candy3']);    emitter.gravity = 400;	    emitter.bounce.setTo(0.5, 0.5);    	cursors = this.input.keyboard.createCursorKeys();    fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR); //boton de disparo    fireButton.onDown.add(this.shoot, this);    fireButton.onUp.add(function(){this.fPlayer.animations.play('idle')}, this);	this.game.sound.mute = false;	this.fMenuBtn.inputEnabled = true;	this.fMenuBtn.events.onInputUp.add(this.manejarPausa,this);  //pausar juego  	this.game.input.onDown.add(this.unpause, this); //quitar pausa					BgMusic = this.game.add.audio('BgMusic', 0.3); //agregar musica y volumen	BgMusic.allowMultiple = false;	BgMusic.loop = true;	BgMusic2 = this.game.add.audio('BgMusic2', 0.3); //agregar musica y volumen	BgMusic2.allowMultiple = false;	BgMusic2.loop = true;		var BgMusicSelector = Math.round(Math.random()) //agreagar musica de bg randomicamente	if(BgMusicSelector >= 0.5 && musicEnabled){		this.BgMusic = 1;		BgMusic.play();			}	if(BgMusicSelector <= 0.5 && musicEnabled){		this.BgMusic = 2;		BgMusic2.play();			}	zombieWound1 = this.game.add.audio('zombieWound1', 0.2);	zombieWound1.allowMultiple = false;	zombieWound1.addMarker('zombieWound1', 0, 0.15	);		zombieWound2 = this.game.add.audio('zombieWound2', 0.2);	zombieWound2.allowMultiple = false;	zombieWound2.addMarker('zombieWound2', 0, 0.15	);	zombieWound3 = this.game.add.audio('zombieWound3', 0.2);	zombieWound3.allowMultiple = false;	zombieWound3.addMarker('zombieWound3', 0, 0.15	);	zombieWound4 = this.game.add.audio('zombieWound4', 0.2);	zombieWound4.allowMultiple = false;	zombieWound4.addMarker('zombieWound4', 0, 0.15	);	brainsAudio = this.game.add.audio('brainsAudio');	brainsAudio.allowMultiple = false;	brainsAudio.addMarker('brainsAudio', 0, 0.6	);	jumpBall = this.game.add.audio('jumpBall');	jumpBall.allowMultiple = false;	jumpBall.addMarker('jumpBall', 0, 0.13	);	shoot = this.game.add.audio('shoot');	shoot.allowMultiple = false;	shoot.addMarker('shoot', 0, 0.3);	luckyBall = this.game.add.audio('luckyBall');	luckyBall.allowMultiple = false;	luckyBall.addMarker('luckyBall', 0, 0.619);	death = this.game.add.audio('death');	death.allowMultiple = false;	death.addMarker('death', 0, 2.26);	cortar = this.game.add.audio('cortar');	cortar.allowMultiple = false;	cortar.addMarker('cortar', 0, 0.92);	levelUpSound = this.game.add.audio('levelUpSound');	levelUpSound.allowMultiple = false;	levelUpSound.addMarker('levelUpSound', 0, 1.10);	getCoin = this.game.add.audio('getCoin');	getCoin.allowMultiple = false;	getCoin.addMarker('getCoin', 0, 0.25);	gotIngredient = this.game.add.audio('gotIngredient');	gotIngredient.allowMultiple = false;	gotIngredient.addMarker('gotIngredient', 0, 0.38);		this.fxSounds = [jumpBall,luckyBall,death, levelUpSound,cortar, shoot,zombieWound1,zombieWound2,zombieWound3,zombieWound4,brainsAudio,getCoin,gotIngredient]; //agreagar aqui todos los sound fx que se necesita adminstrar	if(!fxEnabled){		this.fxSounds.forEach(function(soundFx) { 	 //en caso de que se deshabilite los sonidos fxs		soundFx.mute = true;	},this);	}			this.swipeCoordX = 0;	this.swipeCoordX2 = 0;	this.swipeCoordY = 0;	this.swipeCoordY2 = 0;	this.VectorX = 0;	this.VectorY = 0;	this.PowerX = 0	this.DirX = 0;	this.PowerY = 0	this.DirY = 0;	this.ExtraPowerY = 3;	this.ExtraPowerX = 3;	this.wannaJump = false;	this.minJumpIntention = 65;	this.maxPowerX = 90;	this.cascaritas = 0;	this.jumpingPower = 400;		this.game.input.onDown.add(function(pointer) { //manejo de swipe control de pantalla			this.swipeCoordX = pointer.x;  			this.swipeCoordY = pointer.y;   							}, this);   	this.game.input.onUp.add(this.swipeUpAction, this);  //manejo de swipe UP control de pantalla	this.crearZombies = this.game.time.create(false); //crear zombies        this.crearZombies.loop(4500, this.crearUnZombie, this);    this.crearZombies.start();	this.crearClientes = this.game.time.create(false); //crear clientes        this.crearClientes.loop(20000, this.crearUnCliente, this);    this.crearClientes.start();};Level2.prototype.crearUnCliente = function () {		var _cliente = new client1(this.game, 1932.0, 292.0);	this.fClientes.add(_cliente);}Level2.prototype.crearUnZombie = function () {	wichPlatform = Math.round(Math.random()*(this.fSpawnPoints.length-1));		var xpos = this.fSpawnPoints.children[wichPlatform].x;	var ypos = this.fSpawnPoints.children[wichPlatform].y;		var zombie = new zombie2(this.game, xpos, ypos);	this.fEnemies.add(zombie);}Level2.prototype.shoot = function () {			if(this.fPlayer.hasPistol){							shoot.play('shoot');			this.fPlayer.animations.play('shooting');			if(this.fPlayer.scale.x>0){				 this.weapon.trackSprite(this.fPlayer, 35, 10);			this.weapon.fireAngle =  0;			}else{				 this.weapon.trackSprite(this.fPlayer, -35, 10);				 this.weapon.fireAngle =  180;			}				//this.weapon.bulletAngleOffset = 90;			 this.weapon.fire();			//this.weapon.fire(this.fPlayer.x+(2*this.fPlayer.scale.x),this.fPlayer.y);}}Level2.prototype.hitPlayer = function (player, enemy) { //restart o reiniciar nivel enemy.body.moves = false; enemy.animations.play('idle');player.body.velocity.x-=300;	if(!this.insideElevator){		this.fPlayer.myCoins-=5;		if(this.fPlayer.myCoins<=0){			this.fPlayer.myCoins = 0;		}				}}Level2.prototype.crearMoneda = function (enemy) {	var _coin = new coin(this.game, enemy.world.x, enemy.world.y);	this.fCoins.add(_coin);	}Level2.prototype.soltarFlavor = function (enemy) {	var posibilidades = Math.ceil(Math.random()*100);	console.log(posibilidades);	if(posibilidades<=16){		var ingredientPiece = this.add.sprite(enemy.world.x, enemy.world.y, 'straberryFlavor', null, this.game.state.getCurrentState﻿().fCoins);	}	if(posibilidades>16 && posibilidades<=32){		var ingredientPiece = this.add.sprite(enemy.world.x, enemy.world.y, 'lemonFlavor', null, this.game.state.getCurrentState﻿().fCoins);	}	if(posibilidades>32 && posibilidades<=64){		var ingredientPiece = this.add.sprite(enemy.world.x, enemy.world.y, 'bannaFlavor', null, this.game.state.getCurrentState﻿().fCoins);	}		if(posibilidades>64 && posibilidades<=80){		var ingredientPiece = this.add.sprite(enemy.world.x, enemy.world.y, 'chocolateCore', null, this.game.state.getCurrentState﻿().fCoins);	}		if(posibilidades>80 && posibilidades<=96){		var ingredientPiece = this.add.sprite(enemy.world.x, enemy.world.y, 'chiliCore', null, this.game.state.getCurrentState﻿().fCoins);	}		if(posibilidades>96 && posibilidades<=100){		var ingredientPiece = this.add.sprite(enemy.world.x, enemy.world.y, 'cherryCore', null, this.game.state.getCurrentState﻿().fCoins);	}		ingredientPiece.anchor.set(0.5, 0.5);	this.game.physics.arcade.enable(ingredientPiece);	ingredientPiece.body.gravity.y = 800.0;	}	Level2.prototype.hitEnemy = function (bullet, enemy) {		zombieHitSoundNumber = Math.ceil(Math.random()*4);	switch (zombieHitSoundNumber){		case 1:		zombieWound1.play('zombieWound1');		break;		case 2:		zombieWound2.play('zombieWound2');		break;		case 3:		zombieWound3.play('zombieWound3');		break;		case 4:		zombieWound4.play('zombieWound4');		break;	}	emitter.setXSpeed(0, 600*Math.sign(bullet.body.velocity.x));    emitter.x = enemy.world.x;    emitter.y = enemy.world.y;	emitter.setAlpha(0.3, 0.8,500, Phaser.Easing.Linear.None, false);    emitter.setScale(0.5, 1);    emitter.start(true, 1000, null, 10);    enemy.life--;   if(enemy.life<=0){ //muere el enemigo   		var probabilidad =  Math.ceil(Math.random()*100);   		if(probabilidad>50){   			this.game.state.getCurrentState﻿().crearMoneda(enemy);   		}else{			this.game.state.getCurrentState﻿().soltarFlavor(enemy);   		}	//	   	enemy.destroy();   }	enemy.tint = 0xE17FB2;	  timer = this.game.time.create(false);	  timer.loop(100, function normlaColor(){	  	enemy.tint = 0xffffff;	  	timer.destroy();	  }, this);	  timer.start();		bullet.kill();}Level2.prototype.placeCannon = function () {	this.fPlayer.myCannons--;	var _cannon1 = new cannon(this.game, this.fPlayer.x, this.fPlayer.y-this.fPlayer.height);	this.fCannons.add(_cannon1);}Level2.prototype.pickUp = function () {this.pickUped = true;}Level2.prototype.isCollinding = function (player,cannon) {	if(this.pickUped ){		cannon.visible=false;		cannon.timer.destroy();		cannon.weapon.destroy();		cannon.destroy();		this.pickUped=false;		player.myCannons++;		}}Level2.prototype.collectCoin = function (player,coin) {		if(coin.key=='atlas4'){		getCoin.play('getCoin');		this.fPlayer.myCoins++;	}else{		if(coin.key=='straberryFlavor'){			this.fFlavor1.text++;		}		if(coin.key=='lemonFlavor'){			this.fFlavor2.text++;		}		if(coin.key=='bannaFlavor'){			this.fFlavor3.text++;		}		if(coin.key=='chocolateCore'){			this.fFlavor4.text++;		}		if(coin.key=='chiliCore'){			this.fFlavor5.text++;		}		if(coin.key=='cherryCore'){			this.fFlavor6.text++;		}		gotIngredient.play('gotIngredient');	}	coin.destroy();		}Level2.prototype.hitWall = function (bullet,pared) {		bullet.kill();}Level2.prototype.changeDirection = function (caja,zombie) {	if(zombie.chocado == false){		if (zombie != zombie.zombieChocado){ //este pedazo hizo ruchis cabreada, las variables locales hizo pat								zombie.chanceDirection.dispatch();				zombie.chocado = true;				zombie.zombieChocado = zombie;			} else{zombie.zombieChocado=null;}	}else{		zombie.chocado = false;			}	}Level2.prototype.enterStore = function (player,store) {	this.fEnterHouseBtn.visible = true;}Level2.prototype.enterHouse = function () {this.fPlayer.visible=false;this.fPlayer.body.moves = false;this.fEnterHouseBtn.visible = false;this.fExitHouseBtn.visible = true;this.fStoreGroup.visible = true;}Level2.prototype.exitHouse = function () {this.fPlayer.visible=true;this.fPlayer.body.moves = true;this.fEnterHouseBtn.visible = true;this.fExitHouseBtn.visible = false;this.fStoreGroup.visible = false;}Level2.prototype.buyGun = function () {	if(!this.fShootBtn.visible){		if(this.fPlayer.myCoins/10>=1){		this.fShootBtn.visible =  true;		this.fPlayer.hasPistol = true;		this.fPlayer.myCoins-=10;		}	}}Level2.prototype.buyCannon = function () {	if(this.fPlayer.myCoins/30>=1){	this.fPlayer.myCannons++;	this.fPlayer.myCoins-=30;	}	}Level2.prototype.elevatorAction = function () {this.fElevatorInn.visible =  true;	}Level2.prototype.enterElevator = function () {if(this.elevatorColliding){		this.estoyAbajo.active =  true;		this.game.camera.follow(this.fAscensor1);		this.openElevator = this.fAscensor1.animations.play('open', 30, false);		this.openElevator.onComplete.add(function(){		this.fPlayer.position.setTo(this.fAscensor1.x,this.fAscensor1.y+20);		this.fAscensor1.animations.play('close', 30, false);		this.fPlayer.alpha=0;		this.fPlayer.moves = false;		this.fElevatorInn.visible =  false;		this.fElevatorOut.visible =  true;				this.fShootBtn.visible=false;		this.fDropCannonBtn.visible =  false;		this.insideElevator =  true;		this.fAscensor1.body.moves = true;				//this.fAscensor1.inmovable =  false;			}, this);	}	}Level2.prototype.exitElevator = function () {	this.fAscensor1.body.velocity.y=0;	this.openElevator = this.fAscensor1.animations.play('open', 30, false);	this.openElevator.onComplete.add(function(){	this.fAscensor1.animations.play('close', 30, false);	this.fPlayer.position.setTo(this.fAscensor1.x,this.fAscensor1.y+20);	this.game.camera.follow(this.fPlayer);	this.fPlayer.moves = true;		this.fPlayer.alpha=1;		this.fElevatorInn.visible =  true;		this.fElevatorOut.visible =  false;				if(this.fPlayer.hasPistol){			this.fShootBtn.visible=true;		}				this.fDropCannonBtn.visible =  true;		this.insideElevator =  false;			}, this);	}Level2.prototype.killEnemy = function (enemy, deathbar) {	deathbar.destroy();}Level2.prototype.goinDown = function () {	this.fAscensor1.body.velocity.y=180;}Level2.prototype.update = function () {	this.fYourMoney.text = this.fPlayer.myCoins;	this.fMoneyCount.text = this.fPlayer.myCoins;	this.houseColliding = this.game.physics.arcade.overlap(this.fPlayer , this.fStore, this.enterStore, null, this);	this.elevatorColliding =this.game.physics.arcade.collide(this.fAscensor1 , this.fPlayer, this.elevatorAction, null, this);		this.game.physics.arcade.overlap(this.fDirections , this.fEnemies, this.changeDirection, null, this);	this.game.physics.arcade.overlap(this.fPlayer , this.fCoins, this.collectCoin, null, this);	this.game.physics.arcade.collide(this.fCoins , this.fPlatforms);	this.game.physics.arcade.collide(this.fCannons , this.fAscensor1);	this.game.physics.arcade.collide(this.fCannons , this.fPlatforms);	this.game.physics.arcade.collide(this.fPlayer , this.fElevators);	this.game.physics.arcade.collide(this.fPlayer , this.fPlatforms);	this.game.physics.arcade.overlap(this.fEnemies , this.fDeathBar, this.killEnemy, null, this);	this.game.physics.arcade.collide(this.fEnemies , this.fPlatforms);	this.game.physics.arcade.collide(this.fPlayer , this.fEnemies, this.hitPlayer, null, this);	this.game.physics.arcade.overlap(this.weapon.bullets, this.fPlatforms, this.hitWall, null, this);	this.game.physics.arcade.overlap(this.weapon.bullets, this.fEnemies, this.hitEnemy, null, this);this.fElevatorPipe.y =  this.fAscensor1.y;//activar o desactivar sabores o cores de caramelos segun el numero en bodegaif(this.game.state.getCurrentState﻿().fFlavor1.text >0){	if(this.game.state.getCurrentState﻿().soltarStraberry){		console.log('soltando sabor');		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot1, flavor:'straberry'});		this.game.state.getCurrentState﻿().soltarStraberry = false;	}this.fStraberryFlavor.inputEnabled = true;this.fStraberryFlavor.alpha = 1;}else{	this.fStraberryFlavor.inputEnabled = false;this.fStraberryFlavor.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor2.text >0){	if(this.game.state.getCurrentState﻿().soltarLemon){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot2, flavor:'lemon'});		this.game.state.getCurrentState﻿().soltarLemon = false;	}this.fLemonFlavor.inputEnabled = true;this.fLemonFlavor.alpha = 1;}else{		this.fLemonFlavor.inputEnabled = false;this.fLemonFlavor.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor3.text >0){	if(this.game.state.getCurrentState﻿().soltarBanana){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot3, flavor:'banana'});		this.game.state.getCurrentState﻿().soltarBanana = false;	}this.fBannaFlavor.inputEnabled = true;this.fBannaFlavor.alpha = 1;}else{	this.fBannaFlavor.inputEnabled = false;this.fBannaFlavor.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor4.text >0){	if(this.game.state.getCurrentState﻿().soltarChocolate){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot4, flavor:'chocolateCore'});		this.game.state.getCurrentState﻿().soltarChocolate = false;	}this.fChocolateCore.inputEnabled = true;this.fChocolateCore.alpha = 1;}else{	this.fChocolateCore.inputEnabled = false;this.fChocolateCore.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor5.text >0){	if(this.game.state.getCurrentState﻿().soltarChilli){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot5, flavor:'chiliCore'});		this.game.state.getCurrentState﻿().soltarChilli = false;	}this.fChiliCore.inputEnabled = true;this.fChiliCore.alpha = 1;}else{	this.fChiliCore.inputEnabled = false;this.fChiliCore.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor6.text >0){	if(this.game.state.getCurrentState﻿().soltarCherry){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot6, flavor:'cherryCore'});		this.game.state.getCurrentState﻿().soltarCherry = false;	}this.fCherryCore.inputEnabled = true;this.fCherryCore.alpha = 1;}else{	this.fCherryCore.inputEnabled = false;this.fCherryCore.alpha = 0.2;}if(!this.insideElevator && this.fPlayer.y>320){if(this.fPlayer.y>1340 && this.fAscensor1.y<1446){	this.fAscensor1.body.velocity.y=180;}}if(this.fAscensor1.y<291){	this.fAscensor1.body.velocity.y=0;	this.fAscensor1.y = 291;}if(this.fAscensor1.y>1446){	this.fAscensor1.body.velocity.y=0;	this.fAscensor1.y = 1446;}	if(this.fPlayer.myCoins < 10 ){ //costo de la pistola				this.fGunBuyBtn.tint = 0xBB2323;						//this.fGunBuyBtn.inputEnabled = false;	}else{			if(!this.fShootBtn.visible){				this.fGunBuyBtn.tint = 0xffffff;			}else{								this.fGunBuyBtn.tint = 0xBB2323;			}			//this.fGunBuyBtn.inputEnabled = true;	}	if(this.fPlayer.myCoins < 30){		this.fCannonBuyBtn.tint = 0xBB2323;			}else{			this.fCannonBuyBtn.tint = 0xffffff;	}	if(this.fPlayer.myCannons>0){ //si tiene algun cannon 		this.fDropCannonBtn.visible=true;	}else{		this.fDropCannonBtn.visible=false;	}	this.cannonCollinding = this.game.physics.arcade.overlap(this.fPlayer , this.fCannons, this.isCollinding, null, this);		if(this.cannonCollinding){		this.fPickUpButton.visible =  true;		}else{		this.fPickUpButton.visible =  false;		}	if(!this.houseColliding){		this.fEnterHouseBtn.visible=false;	}if(!this.elevatorColliding){		this.fElevatorInn.visible=false;	}				if(this.fPlayer.body.touching.down && this.wannaJump && !this.doubleJumping){								this.fPlayer.body.velocity.y = -this.jumpingPower;				this.wannaJump = false;				this.jumping = true;				this.justJump = true;	}	else if(this.fPlayer.body.touching.down ){ //si el jugador esta topando algo abajo								if(this.justJump){				this.fPlayer.animations.play('idle');					this.fPlayer.body.drag.x=980;												this.justJump=false;				}								this.jumping = false;			}	else if(this.doubleJumping){							this.doubleJumping = false;			this.doubleJump = false;			this.wannaJump = false;			}				if(this.jumping && this.doubleJump && this.wannaJump){								this.doubleJumping = true;								this.fPlayer.body.velocity.y = -this.jumpingPower;				var lastEmitter = this.fPlayer.game.state.getCurrentState﻿().LuckyEmitters.pop();							lastEmitter.destroy();				console.log('doubleJumpActivado');							}	};Level2.prototype.render = function () {	this.game.debug.cameraInfo(this.game.camera, 32, 32);   // this.game.debug.geom(this.line1);//sthis.game.debug.body(this.fPlayer);	};