// -- user code here --	var musicEnabled = true;	var fxEnabled = true;/* --- start generated code --- */// Generated by  1.5.4 (Phaser v2.6.2)/** * Level3. */function Level3() {		Phaser.State.call(this);	}/** @type Phaser.State */var Level3_proto = Object.create(Phaser.State.prototype);Level3.prototype = Level3_proto;Level3.prototype.constructor = Level3;Level3.prototype.init = function () {		this.myInit();		this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;	this.scale.pageAlignHorizontally = true;	this.scale.pageAlignVertically = true;	};Level3.prototype.preload = function () {		this.myPreload();	};Level3.prototype.create = function () {	this.add.sprite(0.0, 0.0, 'newBackground');		var _chickRoom = this.add.sprite(478.0, 671.0, 'chickRoom');		var _chickRoomUp = this.add.sprite(480.0, 680.0, 'chickRoom');	_chickRoomUp.alpha = 0.0;	this.game.physics.arcade.enable(_chickRoomUp);	_chickRoomUp.body.immovable = true;		var _chick = new chickBear(this.game, 575.0, 747.0);	this.add.existing(_chick);		var _escaleras = this.add.group();		var _walls = this.add.group();		var _bigWall1 = this.add.sprite(-1.0, -669.0, 'bigWall', null, _walls);	_bigWall1.scale.set(1.0, 3.0);	_bigWall1.alpha = 0.0;	this.game.physics.arcade.enable(_bigWall1);	_bigWall1.body.setSize(62.5925669670105, 926.2138671875, -34.5925669670105, -6.0);	_bigWall1.body.moves = false;	_bigWall1.body.immovable = true;		var _bigWall = this.add.sprite(1278.0, -450.0, 'bigWall', null, _walls);	_bigWall.scale.set(1.0, 3.0);	_bigWall.alpha = 0.0;	this.game.physics.arcade.enable(_bigWall);	_bigWall.body.setSize(28.0, 926.2138671875, 0.0, -6.0);	_bigWall.body.moves = false;	_bigWall.body.immovable = true;		var _elevatorSpace = this.add.sprite(525.0, 183.0, 'elevatorSpace');	_elevatorSpace.scale.set(0.6, 0.2);		this.add.sprite(16.0, 573.0, 'atlas6', 'lamp instancia 10015');		this.add.sprite(17.0, 365.0, 'atlas6', 'lamp instancia 10015');		this.add.sprite(425.0, 244.0, 'atlas6', 'lamp instancia 10015');		var _platforms = this.add.group();	_platforms.position.set(56.0, 401.0);		var _floor = this.add.sprite(-58.0, 373.0, 'floor21', null, _platforms);	this.game.physics.arcade.enable(_floor);	_floor.body.immovable = true;	_floor.data = {	direction:true,	zombiesWalking:[]		};		var _thaCeiling = this.add.sprite(-892.0, -219.0, 'thaCeiling', null, _platforms);	this.game.physics.arcade.enable(_thaCeiling);	_thaCeiling.body.moves = false;	_thaCeiling.body.immovable = true;		var _floorNew = this.add.sprite(-207.0, -48.0, 'floorNew', null, _platforms);	this.game.physics.arcade.enable(_floorNew);	_floorNew.body.moves = false;	_floorNew.body.immovable = true;	_floorNew.data = {	direction:true,	zombiesWalking:[]	};		var _floorNew2 = this.add.sprite(71.0, 56.0, 'floorNew', null, _platforms);	this.game.physics.arcade.enable(_floorNew2);	_floorNew2.body.moves = false;	_floorNew2.body.immovable = true;	_floorNew2.data = {	direction:false,	zombiesWalking:[]	};		var _floorNew3 = this.add.sprite(58.0, 268.0, 'floorNew', null, _platforms);	this.game.physics.arcade.enable(_floorNew3);	_floorNew3.body.moves = false;	_floorNew3.body.immovable = true;	_floorNew3.data = {	direction:false,	zombiesWalking:[]		};		var _thaCeiling2 = this.add.sprite(-340.0, -219.0, 'thaCeiling', null, _platforms);	this.game.physics.arcade.enable(_thaCeiling2);	_thaCeiling2.body.moves = false;	_thaCeiling2.body.immovable = true;	_thaCeiling2.data = {	direction:false,	zombiesWalking:[],	name:'topCeil'	};		var _floorNew4 = this.add.sprite(-58.0, 165.0, 'floorNew', null, _platforms);	this.game.physics.arcade.enable(_floorNew4);	_floorNew4.body.moves = false;	_floorNew4.body.immovable = true;	_floorNew4.data = {	direction:true,	zombiesWalking:[]	};		var _thaCeiling3 = this.add.sprite(468.0, -15.0, 'thaCeiling', null, _platforms);	this.game.physics.arcade.enable(_thaCeiling3);	_thaCeiling3.body.moves = false;	_thaCeiling3.body.immovable = true;	_thaCeiling3.data = {	direction:false,	zombiesWalking:[]	};		var _storeBgBlack1 = this.add.sprite(574.0, -410.0, 'storeBgBlack', null, _platforms);	_storeBgBlack1.scale.set(1.0, 1.5);	this.game.physics.arcade.enable(_storeBgBlack1);	_storeBgBlack1.body.immovable = true;	_storeBgBlack1.data = {	direction:false,	zombiesWalking:[],	name:'topCeil'		};		var _sewer = this.add.group();	_sewer.position.set(167.0, 0.0);		var _elevators = this.add.group();	_elevators.position.set(64.0, 402.0);		var _cannons = this.add.group();		var _enemies = this.add.group();	_enemies.position.set(-246.0, -59.0);		var _store = this.add.sprite(70.0, 67.0, 'store');	this.game.physics.arcade.enable(_store);	_store.body.setSize(141.4524688720703, 109.41566467285156);	_store.body.moves = false;	_store.body.immovable = true;		var _menuBtn = this.add.sprite(580.0, 12.0, 'menuBtn');	_menuBtn.fixedToCamera = true;		var _shootBtn = this.add.sprite(14.0, 844.0, 'shootBtn');	_shootBtn.fixedToCamera = true;		var _pickUpButton = this.add.sprite(411.0, 846.0, 'pickUpButton');	_pickUpButton.fixedToCamera = true;		var _dropCannonBtn = this.add.sprite(523.0, 845.0, 'dropCannonBtn');	_dropCannonBtn.fixedToCamera = true;		var _enterHouseBtn = this.add.sprite(15.0, 845.0, 'enterHouseBtn');	_enterHouseBtn.fixedToCamera = true;		var _coins = this.add.group();		var _directions = this.add.group();		var _lifeBarCanvas = new lifeBar(this.game, 7.0, 10.0);	this.add.existing(_lifeBarCanvas);		var _clientes = this.add.group();	_clientes.position.set(-665.0, 0.0);		var _pipes = this.add.group();		var _pipe = this.add.sprite(0.0, 278.0, 'pipe', null, _pipes);	this.game.physics.arcade.enable(_pipe);	_pipe.body.immovable = true;	_pipe.body.collideWorldBounds = true;		var _bullets = this.add.group();		var _ascensor1 = new ascensor(this.game, 583.0, 120.0);	this.add.existing(_ascensor1);		var _Player = new player(this.game, 323.0, 136.0);	this.add.existing(_Player);		var _storeGroup = this.add.group();	_storeGroup.position.set(-97.0, 174.0);		var _yourMoney = this.add.text(173.0, 58.0, '0000', {"font":"bold 20px Arial","fill":"#f0f0f0","align":"center"}, _storeGroup);	_yourMoney.fixedToCamera = true;		this.add.sprite(72.0, 15.0, 'storeBgBlack', null, _storeGroup);		this.add.sprite(100.0, 13.0, 'shop', null, _storeGroup);		this.add.sprite(123.0, 643.0, 'exitStoreSpace', null, _storeGroup);		this.add.sprite(385.0, 643.0, 'shopSpace', null, _storeGroup);		var _buySlot = this.add.group(_storeGroup);	_buySlot.position.set(0.0, 9.0);		var _gunBuyBtn = this.add.sprite(476.0, 665.0, 'gunBuyBtn', null, _buySlot);	_gunBuyBtn.fixedToCamera = true;		var _cannonBuyBtn = this.add.sprite(626.0, 665.0, 'cannonBuyBtn', null, _buySlot);	_cannonBuyBtn.fixedToCamera = true;		var _gunValue = this.add.text(499.0, 727.0, '10', {"font":"bold 20px Arial","fill":"#f0f0f0"}, _buySlot);		var _cannonValue = this.add.text(642.0, 727.0, '100', {"font":"bold 20px Arial","fill":"#f0f0f0"}, _buySlot);		var _rollValue = this.add.text(576.0, 726.0, '60', {"font":"bold 20px Arial","fill":"#f0f0f0"}, _buySlot);		var _keyCost = this.add.text(419.0, 727.0, '270', {"font":"bold 20px Arial","fill":"#f0f0f0","align":"center"}, _buySlot);		var _cookSlot = this.add.group(_storeGroup);	_cookSlot.position.set(0.0, 9.0);		var _pot1 = new smallPot(this.game, 360.0, 333.0);	_pot1.name = 'pot';	_cookSlot.add(_pot1);		var _pot2 = new smallPot(this.game, 463.0, 333.0);	_pot2.name = 'pot';	_cookSlot.add(_pot2);		var _pot3 = new smallPot(this.game, 566.0, 333.0);	_pot3.name = 'pot';	_cookSlot.add(_pot3);		var _bigBtn = new bigBtn(this.game, 404.0, 541.0);	_bigBtn.name = 'bigPot';	_cookSlot.add(_bigBtn);		var _flavorSlot = this.add.group(_storeGroup);	_flavorSlot.position.set(0.0, -8.0);		var _flavorPot4 = this.add.sprite(155.0, 350.0, 'emptyBtn', null, _flavorSlot);	_flavorPot4.alpha = 0.0;		var _flavorPot5 = this.add.sprite(153.0, 439.0, 'emptyBtn', null, _flavorSlot);	_flavorPot5.alpha = 0.0;		var _flavorPot6 = this.add.sprite(152.0, 533.0, 'emptyBtn', null, _flavorSlot);	_flavorPot6.alpha = 0.0;		var _flavorPot1 = this.add.sprite(313.0, 119.0, 'emptyBtn', null, _flavorSlot);	_flavorPot1.alpha = 0.0;		var _flavorPot2 = this.add.sprite(407.0, 119.0, 'emptyBtn', null, _flavorSlot);	_flavorPot2.alpha = 0.0;		var _flavorPot3 = this.add.sprite(503.0, 119.0, 'emptyBtn', null, _flavorSlot);	_flavorPot3.alpha = 0.0;		var _bannaFlavor = this.add.sprite(538.0, 154.0, 'bannaFlavor', null, _flavorSlot);	_bannaFlavor.anchor.set(0.5, 0.5);	this.game.physics.arcade.enable(_bannaFlavor);	_bannaFlavor.body.setSize(36.0, 36.0, 13.0, 9.0);		var _lemonFlavor = this.add.sprite(442.0, 154.0, 'lemonFlavor', null, _flavorSlot);	_lemonFlavor.anchor.set(0.5, 0.5);	this.game.physics.arcade.enable(_lemonFlavor);	_lemonFlavor.body.setSize(36.0, 36.0, 13.0, 9.0);	_lemonFlavor.body.moves = false;		var _straberryFlavor = this.add.sprite(349.0, 154.0, 'straberryFlavor', null, _flavorSlot);	_straberryFlavor.anchor.set(0.5, 0.5);	this.game.physics.arcade.enable(_straberryFlavor);	_straberryFlavor.body.setSize(36.0, 36.0, 13.0, 9.0);	_straberryFlavor.body.moves = false;		var _flavor1 = this.add.text(348.0, 184.0, '2', {"font":"bold 15px Arial","fill":"#5e3056"}, _flavorSlot);		var _flavor2 = this.add.text(440.0, 184.0, '2', {"font":"bold 15px Arial","fill":"#5e3056"}, _flavorSlot);		var _flavor3 = this.add.text(538.0, 184.0, '2', {"font":"bold 15px Arial","fill":"#5e3056"}, _flavorSlot);		var _flavor4 = this.add.text(140.0, 385.0, '2', {"font":"bold 15px Arial","fill":"#5e3056"}, _flavorSlot);		var _flavor5 = this.add.text(140.0, 475.0, '2', {"font":"bold 15px Arial","fill":"#5e3056"}, _flavorSlot);		var _flavor6 = this.add.text(140.0, 563.0, '2', {"font":"bold 15px Arial","fill":"#5e3056"}, _flavorSlot);		var _chocolateCore = this.add.sprite(188.0, 384.0, 'chocolateJar', null, _flavorSlot);	_chocolateCore.anchor.set(0.5, 0.5);	this.game.physics.arcade.enable(_chocolateCore);	_chocolateCore.body.setSize(36.0, 36.0, 13.0, 9.0);		var _chiliCore = this.add.sprite(188.0, 474.0, 'chiliJar', null, _flavorSlot);	_chiliCore.anchor.set(0.5, 0.5);	this.game.physics.arcade.enable(_chiliCore);	_chiliCore.body.setSize(36.0, 36.0, 13.0, 9.0);		var _cherryCore = this.add.sprite(188.0, 570.0, 'cherryJar', null, _flavorSlot);	_cherryCore.anchor.set(0.5, 0.5);	this.game.physics.arcade.enable(_cherryCore);	_cherryCore.body.setSize(36.0, 36.0, 13.0, 9.0);		var _BagDone = new bag(this.game, 598.0, 266.0);	_flavorSlot.add(_BagDone);		var _candyReady = this.add.group(_storeGroup);		var _OpenStoreBtn = this.add.sprite(130.0, 43.0, 'OpenStoreBtn', null, _storeGroup);		var _DenyOrderBtn = this.add.sprite(462.0, 42.0, 'DenyOrderBtn', null, _storeGroup);		var _CloseStoreBtn = this.add.sprite(130.0, 43.0, 'CloseStoreBtn', null, _storeGroup);		var _exitHouseBtn = this.add.sprite(156.0, 652.0, 'exitHouseBtn', null, _storeGroup);	_exitHouseBtn.fixedToCamera = true;		var _arrows_instancia_ = new arrows(this.game, 653.0, 276.0);	_storeGroup.add(_arrows_instancia_);		var _ballModeBtn = this.add.sprite(554.0, 673.0, 'ballModeBtn', null, _storeGroup);		var _keyBuyBtn = this.add.sprite(402.0, 674.0, 'keyBuyBtn', null, _storeGroup);		var _helpBtn = this.add.sprite(156.0, 249.0, 'helpBtn', null, _storeGroup);		var _cookSteps = this.add.sprite(103.0, 18.0, 'cookSteps', null, _storeGroup);		var _elevatorInn = this.add.sprite(15.0, 845.0, 'elevatorInn');	_elevatorInn.fixedToCamera = true;		var _upgradeCannon = this.add.sprite(125.0, 846.0, 'upgradeCannon');		var _upgradeCost = this.add.text(193.0, 857.0, '30', {"font":"bold 18px Arial","fill":"#ffffff"});		var _elevatorOut = this.add.sprite(17.0, 845.0, 'elevatorOut');	_elevatorOut.fixedToCamera = true;		var _changeDirBtn = this.add.sprite(523.0, 845.0, 'changeDirBtn');		var _coin = this.add.sprite(417.0, 20.0, 'atlas4', 'coin0000');	_coin.fixedToCamera = true;		var _moneyCount = this.add.text(449.0, 11.0, '0000', {"font":"bold 40px Arial","fill":"#ffffff"});	_moneyCount.fixedToCamera = true;		var _ordersFlavor = this.add.group();		var _ordersBG = this.add.group(_ordersFlavor);		var _groupCheer = this.add.group();	_groupCheer.position.set(0.0, 131.0);		this.add.sprite(-8.0, 831.0, 'cartel', null, _groupCheer);		var _oleadaNumero = this.add.text(388.0, 855.0, '0', {"font":"bold 88px Arial","fill":"#608961"}, _groupCheer);		var _clientReady = this.add.group();	_clientReady.position.set(-650.0, 0.0);		var _clientsRemain = this.add.text(347.0, 11.0, '00', {"font":"bold 40px Arial","fill":"#ffffff"});	_clientsRemain.fixedToCamera = true;		var _cliente = this.add.sprite(319.0, 19.0, 'atlas5', 'cliente10000');	_cliente.scale.set(0.5, 0.5);	_cliente.fixedToCamera = true;		var _upperBanner = this.add.group();	_upperBanner.position.set(76.0, -139.0);		this.add.sprite(211.0, -3.0, 'letreroSuperior', null, _upperBanner);		var _upBannerTExt = this.add.text(245.0, 105.0, 'Last client attended', {"font":"bold 20px Arial","fill":"#ffffff","align":"center"}, _upperBanner);		var _greatJob = this.add.sprite(-6.0, 960.0, 'greatJob');		var _welcome = this.add.sprite(-4.0, 963.0, 'welcome');				// fields		this.fChickRoom = _chickRoom;	this.fChickRoomUp = _chickRoomUp;	this.fChick = _chick;	this.fEscaleras = _escaleras;	this.fWalls = _walls;	this.fPlatforms = _platforms;	this.fFloorNew = _floorNew;	this.fThaCeiling2 = _thaCeiling2;	this.fElevators = _elevators;	this.fCannons = _cannons;	this.fEnemies = _enemies;	this.fStore = _store;	this.fMenuBtn = _menuBtn;	this.fShootBtn = _shootBtn;	this.fPickUpButton = _pickUpButton;	this.fDropCannonBtn = _dropCannonBtn;	this.fEnterHouseBtn = _enterHouseBtn;	this.fCoins = _coins;	this.fDirections = _directions;	this.fClientes = _clientes;	this.fPipes = _pipes;	this.fBullets = _bullets;	this.fAscensor1 = _ascensor1;	this.fPlayer = _Player;	this.fStoreGroup = _storeGroup;	this.fYourMoney = _yourMoney;	this.fGunBuyBtn = _gunBuyBtn;	this.fCannonBuyBtn = _cannonBuyBtn;	this.fGunValue = _gunValue;	this.fCannonValue = _cannonValue;	this.fRollValue = _rollValue;	this.fKeyCost = _keyCost;	this.fCookSlot = _cookSlot;	this.fBigBtn = _bigBtn;	this.fFlavorSlot = _flavorSlot;	this.fFlavorPot4 = _flavorPot4;	this.fFlavorPot5 = _flavorPot5;	this.fFlavorPot6 = _flavorPot6;	this.fFlavorPot1 = _flavorPot1;	this.fFlavorPot2 = _flavorPot2;	this.fFlavorPot3 = _flavorPot3;	this.fBannaFlavor = _bannaFlavor;	this.fLemonFlavor = _lemonFlavor;	this.fStraberryFlavor = _straberryFlavor;	this.fFlavor1 = _flavor1;	this.fFlavor2 = _flavor2;	this.fFlavor3 = _flavor3;	this.fFlavor4 = _flavor4;	this.fFlavor5 = _flavor5;	this.fFlavor6 = _flavor6;	this.fChocolateCore = _chocolateCore;	this.fChiliCore = _chiliCore;	this.fCherryCore = _cherryCore;	this.fBagDone = _BagDone;	this.fCandyReady = _candyReady;	this.fOpenStoreBtn = _OpenStoreBtn;	this.fDenyOrderBtn = _DenyOrderBtn;	this.fCloseStoreBtn = _CloseStoreBtn;	this.fExitHouseBtn = _exitHouseBtn;	this.fArrows_instancia_ = _arrows_instancia_;	this.fBallModeBtn = _ballModeBtn;	this.fKeyBuyBtn = _keyBuyBtn;	this.fHelpBtn = _helpBtn;	this.fCookSteps = _cookSteps;	this.fElevatorInn = _elevatorInn;	this.fUpgradeCannon = _upgradeCannon;	this.fUpgradeCost = _upgradeCost;	this.fElevatorOut = _elevatorOut;	this.fChangeDirBtn = _changeDirBtn;	this.fMoneyCount = _moneyCount;	this.fOrdersFlavor = _ordersFlavor;	this.fOrdersBG = _ordersBG;	this.fGroupCheer = _groupCheer;	this.fOleadaNumero = _oleadaNumero;	this.fClientReady = _clientReady;	this.fClientsRemain = _clientsRemain;	this.fUpperBanner = _upperBanner;	this.fUpBannerTExt = _upBannerTExt;	this.fGreatJob = _greatJob;	this.fWelcome = _welcome;			this.myCreate();	};/* --- end generated code --- */// -- user code here --Level3.prototype.myInit = function () {	};Level3.prototype.myPreload = function () {};Level3.prototype.switchMusic = function () {		if(musicEnabled){		BgMusic.pause();		BgMusic2.pause();		musicEnabled = false;		console.log('musica disabled');			}else{			if(this.BgMusic = 1){			BgMusic.play();		}else{			BgMusic2.stop();		}				musicEnabled = true;			console.log('musica musicEnabled');	}	};Level3.prototype.switchFX = function () {		if(fxEnabled){	this.fxSounds.forEach(function(soundFx) { 			soundFx.mute = true;	},this);		fxEnabled = false;		console.log('fx disabled');			}else{		this.fxSounds.forEach(function(soundFx) { 		soundFx.mute = false;	},this);					fxEnabled = true;		console.log('fx enabled');	}	};Level3.prototype.manejarPausa = function () {  this.game.paused = true;       	var pauseBg = this.game.add.graphics(0, 0);				pauseBg.beginFill(0xAC4469, 0.6); 	    pauseBg.moveTo(this.game.camera.x,this.game.camera.y);	    pauseBg.lineTo(this.game.camera.x+this.game.camera.width, this.game.camera.y);	    pauseBg.lineTo(this.game.camera.x+this.game.camera.width, this.game.camera.y+this.game.camera.height);	    pauseBg.lineTo(this.game.camera.x, this.game.camera.y+this.game.camera.height);	    pauseBg.lineTo(this.game.camera.x,this.game.camera.y);	    pauseBg.endFill();	    this.Bg = this.game.add.sprite(this.game.camera.x, this.game.camera.y, pauseBg.generateTexture());	    pauseBg.destroy();	    var pauseBgMenu = this.game.add.graphics(this.game.camera.x,this.game.camera.y);	    pauseBgMenu.beginFill(0xAC4469); 	    pauseBgMenu.moveTo(0,0);	    pauseBgMenu.lineTo(524, 0);	    pauseBgMenu.lineTo(524, 330);	    pauseBgMenu.lineTo(0, 330);	    pauseBgMenu.lineTo(0, 0);	    pauseBgMenu.endFill();	    this.pauseBgMenu = this.game.add.sprite(this.game.camera.x+this.game.camera.width/2, this.game.camera.y+this.game.camera.height/2, pauseBgMenu.generateTexture());	    this.pauseBgMenu.anchor.setTo(0.5);	    pauseBgMenu.destroy();	    this.pauseIcons = this.game.add.sprite(this.game.camera.x+0, this.game.camera.y+180, 'pauseIcons');	    this.OnBtn = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+360, 'OnBtn');		this.OffMusic = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+360, 'OffBtn');		this.OnFx = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+430, 'OnBtn');		this.OffFx = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+430, 'OffBtn');		this.HowToPlayBtn = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+500, 'HowToPlayBtn');		this.HowToPlayBtn.visible = false;		this.QuitBtn = this.game.add.sprite(this.game.camera.x+220, this.game.camera.y+570, 'QuitBtn');		if(musicEnabled){							  		this.OnBtn.visible = true;							   		this.OffMusic.visible = false;							   }else{								   	this.OnBtn.visible = false;								   	this.OffMusic.visible = true;							   }		if(fxEnabled){							  		this.OnFx.visible = true;							   		this.OffFx.visible = false;							   }else{								   	this.OnFx.visible = false;								   	this.OffFx.visible = true;							   }}Level3.prototype.unpause = function (event) {  if(this.game.paused){			  	var x1 = (this.state.getCurrentState﻿().pauseBgMenu.x-this.game.camera.x) - this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		x2 = (this.state.getCurrentState﻿().pauseBgMenu.x-this.game.camera.x) + this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		y1 = (this.state.getCurrentState﻿().pauseBgMenu.y-this.game.camera.y) - this.state.getCurrentState﻿().pauseBgMenu.height/2;			  		y2 = (this.state.getCurrentState﻿().pauseBgMenu.y-this.game.camera.y) + this.state.getCurrentState﻿().pauseBgMenu.height/2;			  				  	console.log(x1 + ' ' +x2);			 	console.log(y1 + ' ' +y2);					    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){			    						var mx1 = this.state.getCurrentState﻿().OffMusic.x-this.game.camera.x							mx2 = this.state.getCurrentState﻿().OffMusic.x-this.game.camera.x + this.state.getCurrentState﻿().OffMusic.width;							my1 = this.state.getCurrentState﻿().OffMusic.y-this.game.camera.y							my2 = this.state.getCurrentState﻿().OffMusic.y-this.game.camera.y + this.state.getCurrentState﻿().OffMusic.height;						var fx1 = this.state.getCurrentState﻿().OnFx.x-this.game.camera.x;							fx2 = this.state.getCurrentState﻿().OnFx.x-this.game.camera.x + this.state.getCurrentState﻿().OnFx.width;							fy1 = this.state.getCurrentState﻿().OnFx.y-this.game.camera.y;							fy2 = this.state.getCurrentState﻿().OnFx.y-this.game.camera.y + this.state.getCurrentState﻿().OnFx.height;						var hx1 = this.state.getCurrentState﻿().HowToPlayBtn.x-this.game.camera.x;							hx2 = this.state.getCurrentState﻿().HowToPlayBtn.x-this.game.camera.x + this.state.getCurrentState﻿().HowToPlayBtn.width;							hy1 = this.state.getCurrentState﻿().HowToPlayBtn.y-this.game.camera.y;							hy2 = this.state.getCurrentState﻿().HowToPlayBtn.y-this.game.camera.y + this.state.getCurrentState﻿().HowToPlayBtn.height;						var qx1 = this.state.getCurrentState﻿().QuitBtn.x-this.game.camera.x;							qx2 = this.state.getCurrentState﻿().QuitBtn.x-this.game.camera.x + this.state.getCurrentState﻿().QuitBtn.width;							qy1 = this.state.getCurrentState﻿().QuitBtn.y-this.game.camera.y;							qy2 = this.state.getCurrentState﻿().QuitBtn.y-this.game.camera.y + this.state.getCurrentState﻿().QuitBtn.height;						if(event.x > mx1 && event.x < mx2 && event.y > my1 && event.y < my2 ){ //boton de musica																  if(musicEnabled){									this.OnBtn.visible = false;							   		this.OffMusic.visible = true;							   								   }else{								   	this.OnBtn.visible = true;								   	this.OffMusic.visible = false;							   }	    										this.state.getCurrentState﻿().switchMusic(); 													}					if(event.x > fx1 && event.x < fx2 && event.y > fy1 && event.y < fy2 ){ //boton de fx																  if(fxEnabled){									this.OnFx.visible = false;							   		this.OffFx.visible = true;							   								   }else{								   	this.OnFx.visible = true;								   	this.OffFx.visible = false;							   }	    														this.state.getCurrentState﻿().switchFX(); 													}									if(event.x > qx1 && event.x < qx2 && event.y > qy1 && event.y < qy2 ){ //boton de salir									console.log('quiting');						location.reload();									}			    	  }else{   				   				this.game.paused = false;			  	this.state.getCurrentState﻿().Bg.destroy();			  	this.state.getCurrentState﻿().pauseBgMenu.destroy();			  	this.state.getCurrentState﻿().pauseIcons.destroy();			  	this.state.getCurrentState﻿().OnBtn.destroy();			  	this.state.getCurrentState﻿().OffMusic.destroy();			  	this.state.getCurrentState﻿().OnFx.destroy();			  	this.state.getCurrentState﻿().OffFx.destroy();			  	this.state.getCurrentState﻿().HowToPlayBtn.destroy();			  	this.state.getCurrentState﻿().QuitBtn.destroy();			  }			  }}Level3.prototype.swipeUpAction = function (pointer) {			this.swipeCoordX2 = pointer.x;  			this.swipeCoordY2 = pointer.y; 			if(this.insideElevator){				console.log('insideElevator');				this.elevatorPowerY = this.swipeCoordY - this.swipeCoordY2;				this.elevatorPowerX = this.swipeCoordX - this.swipeCoordX2;								if(Math.abs(this.elevatorPowerY)<=30){ //detener el ascensor si el swipe no fue muy fuerte					this.elevatorPowerY=0;					this.fAscensor1.body.velocity.y=0				}				if(Math.abs(this.elevatorPowerX) >=  100 ){ //tratar de salir de ascensor con swipe					this.elevatorPowerY=0;					this.fAscensor1.body.velocity.y=0					this.exitElevator();				}				console.log(this.fPlayer.myWeapons);				if(this.fPlayer.myWeapons>0){					this.fAscensor1.body.velocity.y-=this.fAscensor1.ascensorVelo * Math.sign(this.elevatorPowerY); //velocidad del ascensor				}else{						this.game.state.getCurrentState﻿().moveUpperBanner('Get a weapon first!');				}											}else{				if(!this.isFiring){					var margenBalon = 60; 				this.fPlayer.body.drag.x=0;								this.PowerX = Math.abs(this.swipeCoordX - this.swipeCoordX2);				this.fPlayer.animations.play('walking');							if(this.PowerX >= this.maxPowerX){								this.fPlayer.animations.play('running');								this.PowerX = this.maxPowerX;							}else if(this.PowerX==0){								this.fPlayer.animations.play('idle');								if(this.wannaShoot){										this.fPlayer.animations.play('shuperShot');										this.wannaShoot = false;								}														}							this.DirX = Math.sign(this.swipeCoordX - this.swipeCoordX2);								this.VectorX = this.DirX * this.PowerX;																												if(!this.jumping && !this.doubleJumping ){																	this.PowerY = Math.abs(this.swipeCoordY - this.swipeCoordY2);																}else if(this.doubleJump){																								this.PowerY = Math.abs(this.swipeCoordY - this.swipeCoordY2);							}else{																									this.PowerY = 0;									if(this.jumping){											this.fPlayer.animations.play('jumping');									}else{										this.fPlayer.animations.play('idle');									}															}							this.DirY = Math.sign(this.swipeCoordY - this.swipeCoordY2);								this.VectorY = this.DirY * this.PowerY;														if(!this.jumping &&  this.PowerY>=120 && this.DirY < 0 && !this.beenHit && !this.fExitHouseBtn.visible){								this.fPlayer.ballMode =  true;								this.fPlayer.ballModeSwitch();							}							if(!this.jumping &&  this.PowerY>=120 && this.DirY > 0 && this.fPlayer.ballMode && !this.fExitHouseBtn.visible){								this.fPlayer.ballMode =  false;								this.fPlayer.ballModeSwitch();							}							if(this.ladderCollider && this.PowerY>=120 && !this.wannaJump ){ //subiendo escalera								if(this.PowerY>=120){									if(this.PowerY > 120){										this.PowerY = 120;									}									this.usingLadder =  true;									this.VectorX = 0;									this.fPlayer.animations.play('climbing');									console.log('quiere usar escalera ' + this.VectorY);																	this.fPlayer.body.velocity.y -= this.VectorY;									this.fPlayer.body.velocity.x = 0;								}else{									this.fPlayer.animations.play('stopClimb');									this.fPlayer.body.velocity.y = 0;								}																					}else{ //si no esta usando escalera entonces salta								if(this.ladderCollider && this.PowerY == 0){									this.fPlayer.animations.play('stopClimb');									this.fPlayer.body.velocity.y = 0;								}								if( this.PowerY > this.minJumpIntention && this.DirY == 1){ //si tiene intencion de salto									jumpBall.play('jumpBall');									this.fPlayer.animations.play('jumping2');									this.wannaJump = true;																	}							}							//console.log('vector y ' + this.VectorY);							if(this.elevatorColliding && this.VectorY < -60){ //intencion de salir del ascensor							this.enterElevator();								this.fPlayer.body.moves= false;																						this.fPlayer.playerBall.alpha=0;							}							if(this.VectorX!=0){																	if(this.VectorX<0){											this.fPlayer.scale.x = 1;										}else{											this.fPlayer.scale.x = -1;										}																}							this.fPlayer.body.velocity.x = -this.VectorX*this.ExtraPowerX;			}												}	}Level3.prototype.onDragFlavor = function () {	console.log('draggin a flavor');}Level3.prototype.onStopDragFlavor = function (item) {console.log(this.pot);	var isFlavorColliding =  item.game.physics.arcade.overlap(item, item.game.state.getCurrentState﻿().fCookSlot, item.game.state.getCurrentState﻿().leaveFlavor)				if(!isFlavorColliding){			this.game.state.getCurrentState﻿().puff(item.x,item.y);			//item.destroy();			var bounce=item.game.add.tween(item);			bounce.to({x:this.pot.x+35, y: this.pot.y+35 }, 500, Phaser.Easing.Bounce.Out);			bounce.start();				}}Level3.prototype.leaveFlavor = function (flavor, cookingPot) {		switch (flavor.key){		case 'straberryFlavor':				cookingPot.game.state.getCurrentState﻿().soltarStraberry = true;		break;		case 'lemonFlavor':			cookingPot.game.state.getCurrentState﻿().soltarLemon = true;		break;		case 'bannaFlavor':			cookingPot.game.state.getCurrentState﻿().soltarBanana = true;		break;		case 'chocolateJar':			cookingPot.game.state.getCurrentState﻿().soltarChocolate = true;		break;		case 'chiliJar':			cookingPot.game.state.getCurrentState﻿().soltarChilli = true;		break;		case 'cherryJar':			cookingPot.game.state.getCurrentState﻿().soltarCherry = true;		break;	}	console.log('cookingPot.myItemsCooking ' + cookingPot.myItemsCooking);if(cookingPot.name == 'pot' && flavor.key=='straberryFlavor' || cookingPot.name == 'pot' && flavor.key=='lemonFlavor' || cookingPot.name == 'pot' && flavor.key=='bannaFlavor' ){			cookingPot.myItemsCooking++;	if(cookingPot.myItemsCooking>1){		console.log('killing flavor');		flavor.kill();		flavor.game.state.getCurrentState﻿().puff(flavor.x,flavor.y);	}else{		dropFlavor('flavor');	}			}else{				if(cookingPot.name == 'bigPot' && flavor.key == 'chocolateJar' || cookingPot.name == 'bigPot' &&  flavor.key == 'chiliJar' || cookingPot.name == 'bigPot' &&  flavor.key == 'cherryJar'){													dropFlavor('core');				}else{										flavor.kill();							flavor.game.state.getCurrentState﻿().puff(flavor.x,flavor.y);				}				}	function dropFlavor(cookingType){		console.log('cookingType ' + cookingType);			var bounce=flavor.game.add.tween(flavor);			bounce.to({ y: cookingPot.y }, 500, Phaser.Easing.Bounce.Out);			bounce.start();			flavor.x = cookingPot.x;			flavor.visible=false;			flavor.inputEnabled = false;			console.log('im here');			if(cookingType == 'flavor'){					if(!Number.isNaN(cookingPot.myItemsCooking)){						boil.play("boil");						switch(flavor.key){							case "straberryFlavor":							var cooking =  cookingPot.animations.play('strawCooking');							break;							case "lemonFlavor":							var cooking =  cookingPot.animations.play('lemonCooking');							break;							case "bannaFlavor":							var cooking =  cookingPot.animations.play('bananaCooking');							break;							default:							var cooking =  cookingPot.animations.play('cooking');							break;						}																cooking.onComplete.addOnce(flavor.game.state.getCurrentState﻿().cookingComplete, {game:this,flavor:flavor,cookingPot:cookingPot});															}			}			if(cookingType == 'core'){				flavor.visible=true;					//Level3.prototype.makeRecipe = function (candyShape, bigPot) 					if(cookingPot.core == 'none'){						cookingPot.core = flavor.key; //asigno el core						cookingPot.coreFlavor = flavor; //asigno el objeto						flavor.game.state.getCurrentState﻿().makeRecipe(flavor,cookingPot);					}else{						console.log('already a core');						flavor.kill();						flavor.game.state.getCurrentState﻿().puff(flavor.x,flavor.y);					}				}			}	}Level3.prototype.cookingComplete = function (item) { //cuando terminan de hacerse los sabores 		pop.play("pop");	console.log('cooking complete');	console.log(this.flavor.key);	this.flavor.kill();	//item.myItemsCooking--;	//item.animations.play('done');	switch(this.flavor.key){	case 'straberryFlavor':	item.animations.play('strawDone');		var flavorDone = item.game.add.sprite(item.position.x, item.position.y, 'straberryDone', null, item.game.state.getCurrentState﻿().fCookSlot);		flavorDone.alpha=0;	break;	case 'lemonFlavor':	item.animations.play('lemonDone');		var flavorDone = item.game.add.sprite(item.position.x, item.position.y, 'lemonDone', null, item.game.state.getCurrentState﻿().fCookSlot);flavorDone.alpha=0;	break;	case 'bannaFlavor':item.animations.play('bananaDone');	var flavorDone = item.game.add.sprite(item.position.x, item.position.y, 'bananaDone', null, item.game.state.getCurrentState﻿().fCookSlot);flavorDone.alpha=0;	break;}	item.game.physics.arcade.enable(flavorDone); //crear sabores segun el flavor.key	flavorDone.body.moves = false;	var bounce=flavorDone.game.add.tween(flavorDone);	bounce.to({ y: flavorDone.y-20 }, 500, Phaser.Easing.Bounce.Out);			    //bounce.onComplete.add(startBounceTween, this);	bounce.start();	flavorDone.anchor.setTo(0.5,0.5);	flavorDone.inputEnabled =  true;	flavorDone.input.enableDrag(true);	flavorDone.events.onDragStart.add(item.game.state.getCurrentState﻿().onDragToBigPot, {game:this,pot:item});	flavorDone.events.onDragStop.add(item.game.state.getCurrentState﻿().onStopToBigPot, {game:this,pot:item});}Level3.prototype.onDragToBigPot = function (item) {	item.alpha = 100;console.log(this.pot);this.pot.myItemsCooking = 0;this.pot.animations.play('idle');}Level3.prototype.onStopToBigPot = function (item) { //soltar objetos en el boton grande	console.log('watafaca ' + item.key)		if(item.key=='straberryDone' || item.key=='lemonDone' ||  item.key=='bananaDone' ){					if(item.game.state.getCurrentState﻿().fBigBtn.flavor == 'none' ){		item.inputEnabled =  false;				item.game.state.getCurrentState﻿().fBigBtn.flavor = item.key; //asigno el sabor		item.game.state.getCurrentState﻿().fBigBtn.ingredientFlavor = item; //coloco el objeto		var isCookedColliding =  item.game.physics.arcade.overlap(item, item.game.state.getCurrentState﻿().fBigBtn, item.game.state.getCurrentState﻿().makeRecipe);				if(!isCookedColliding){					item.kill();									item.game.state.getCurrentState﻿().fBigBtn.flavor = 'none'; //asigno el sabor					item.game.state.getCurrentState﻿().fBigBtn.ingredientFlavor = 'none'; //coloco el objeto				}		}else{				item.game.state.getCurrentState﻿().puff(item.x,item.y);				item.kill();							}		}}			Level3.prototype.puff = function (x, y) {		console.log('estoy en poof');				var puff = new poof(this.game, x, y);		this.fCookSlot.add(puff);	}	Level3.prototype.makeRecipe = function (ingredient, bigPot) {	console.log('bigPot.flavor ' + bigPot.flavor);	console.log('bigPot.core ' + bigPot.core);	ingredient.x = bigPot.position.x;	ingredient.y = bigPot.position.y;	if(bigPot.flavor!=='none' && bigPot.core!=='none'){				console.log('trying yo make  a candy');		if(bigPot.flavor == 'straberryDone'){ //sabores straberry			if(bigPot.core == 'chocolateJar'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'strawberryChocolate', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a straberry - chocolateCore candy');			}			if(bigPot.core == 'chiliJar'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'strawberryChilli', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a straberry - chiliCore candy');			}			if(bigPot.core == 'cherryJar'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'strawberryCherry', null, bigPot.game.state.getCurrentState﻿().fCandyReady);								console.log('make a straberry - cherryCore candy');			}		}		if(bigPot.flavor == 'lemonDone'){ //sabores straberry			if(bigPot.core == 'chocolateJar'){								var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'lemonChocolate', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a lemonDone - chocolateCore candy');			}			if(bigPot.core == 'chiliJar'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'lemonChilli', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a lemonDone - chiliCore candy');			}			if(bigPot.core == 'cherryJar'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'lemonCherry', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a lemonDone - cherryCore candy');			}		}		if(bigPot.flavor == 'bananaDone'){ //sabores straberry			if(bigPot.core == 'chocolateJar'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'bannanaChocolate', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a bananaDone - chocolateCore candy');			}			if(bigPot.core == 'chiliJar'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'bannanaChilli', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a bananaDone - chiliCore candy');			}			if(bigPot.core == 'cherryJar'){				var candyDone = bigPot.game.add.sprite(bigPot.x, bigPot.y, 'bannanaCherry', null, bigPot.game.state.getCurrentState﻿().fCandyReady);				console.log('make a bananaDone - cherryCore candy');			}		}		candyDone.game.physics.arcade.enable(candyDone);				candyDone.anchor.setTo(0.5,0.5);		candyDone.inputEnabled =  false;				candyDone.alpha= 0.0; //mantenemos transparente al caramelo antes de que sea cocinado		var merging = bigPot.animations.play('cooking2');		merging.onComplete.addOnce(candyDone.game.state.getCurrentState﻿().mergeComplete, {game:this,flavorMerged:candyDone,cookingPot:bigPot});						bigPot.flavor='none'		bigPot.core='none'		bigPot.ingredientFlavor.kill();		bigPot.coreFlavor.kill();	}}Level3.prototype.mergeComplete = function (item) {ding.play("ding");	console.log(item);	item.animations.play('idle');			var bounce=item.game.add.tween(this.flavorMerged);		    bounce.to({ y: item.y-25 }, 500, Phaser.Easing.Bounce.Out);		    //bounce.onComplete.add(startBounceTween, this);		    bounce.start();	this.flavorMerged.tint = 0xffffff;	this.flavorMerged.alpha= 1;	this.flavorMerged.inputEnabled =  true;	this.flavorMerged.input.enableDrag(true);	this.flavorMerged.events.onDragStart.add(function(){ item.game.state.getCurrentState﻿().dragginFinalCandy =  true }, this);	this.flavorMerged.events.onDragStop.add(item.game.state.getCurrentState﻿().checkFlavor, {game:this,carameloCreado:this.flavorMerged});}Level3.prototype.checkFlavor = function (item) {	//var f = item.game.physics.arcade.collide(item.game.state.getCurrentState﻿().fCandyReady , item.game.state.getCurrentState﻿().fOrdersFlavor, item.game.state.getCurrentState﻿().checkFlavorConOrden, null, this);	var isColliding = item.game.physics.arcade.collide(item.game.state.getCurrentState﻿().fCandyReady , item.game.state.getCurrentState﻿().fBagDone, item.game.state.getCurrentState﻿().dropInBag, null, this);	if(!isColliding){		item.game.state.getCurrentState﻿().puff(item.x,item.y);		item.destroy();	}}Level3.prototype.dropInBag = function (bag,caramelo) {	 caramelo.game.state.getCurrentState﻿().dragginFinalCandy =  false;caramelo.visible=false;var bagDrop = bag.animations.play("done");bagDrop.onComplete.addOnce(caramelo.game.state.getCurrentState﻿().checkFlavorConOrden, {game:this,bag:bag,caramelo:caramelo});}Level3.prototype.checkFlavorConOrden = function (data) { //atender clientes	console.log('chequeando orden');console.log(this.caramelo.key);var currentClient =  this.bag.currentClient;if(typeof(currentClient.orderBG)!=="undefined" ){console.log(currentClient.orderBG.saborCreado);		if(currentClient.orderBG.saborCreado ==  this.caramelo.key){			console.log('thats my flavore yeah');			console.log('mi cliente es ' + 	currentClient);			currentClient.orderTime =  null;			currentClient.orderBG.wichCandy.destroy();			currentClient.orderBG.destroy();			this.caramelo.game.state.getCurrentState﻿().fClientReady.add(currentClient);			currentClient.body.enable =  true;			currentClient.meLargo= true;			currentClient.body.velocity.x=10;			currentClient.scale.set(-1,1);			currentClient.animations.play('walk');			this.caramelo.game.state.getCurrentState﻿().fPlayer.myCoins+=10;			currentClient.orderBG.saborCreado = '';			getCoin.play('getCoin');								}else{			if(currentClient.orderBG.saborCreado == ''){			this.caramelo.game.state.getCurrentState﻿().moveUpperBanner('a stolen candy :(');			console.log('bolsa robada');			this.bag.animations.play("restore");			}else{			this.caramelo.game.state.getCurrentState﻿().moveUpperBanner('             :(        ');			currentClient.orderBG.saborCreado = '';			currentClient.orderBG.wichCandy.destroy();			currentClient.orderBG.destroy();			this.caramelo.game.state.getCurrentState﻿().fClientReady.add(currentClient);			currentClient.orderTime =  null;			currentClient.body.enable =  true;			currentClient.meLargo = true;			currentClient.body.velocity.x = 10;			currentClient.scale.set(-1,1);			currentClient.animations.play('walk');			}		}		this.caramelo.game.state.getCurrentState﻿().clientesYaAtendidos++;		if(this.caramelo.game.state.getCurrentState﻿().ClientesPorAtender<=this.caramelo.game.state.getCurrentState﻿().clientesYaAtendidos){				this.caramelo.game.state.getCurrentState﻿().moveUpperBanner('Last client attended');								this.caramelo.game.state.getCurrentState﻿().ultimoClienteAtendido = true;				console.log('ultimo cliente atendido ' + this.caramelo.game.state.getCurrentState﻿().ultimoClienteAtendido );			}		this.caramelo.game.state.getCurrentState﻿().doingOrder =  false;				this.bag.animations.play("restore");			this.caramelo.destroy();	}else{		console.log('bolsa robada');		this.caramelo.game.state.getCurrentState﻿().moveUpperBanner('a stolen candy :(');		this.bag.animations.play("restore");	}}Level3.prototype.ordenFallida = function (orden) {this.game.state.getCurrentState﻿().moveUpperBanner('             :(        ');		orden.myOrderFlavor.destroy();		this.game.state.getCurrentState﻿().fClientReady.add(orden.myClientIs);		orden.myClientIs.body.enable =  true;		orden.myClientIs.meLargo= true;		orden.myClientIs.body.velocity.x=10;		orden.myClientIs.scale.set(-1,1);		orden.myClientIs.animations.play('walk');		orden.destroy();		this.game.state.getCurrentState﻿().doingOrder =  false;		this.game.state.getCurrentState﻿().clientesYaAtendidos++;			if(this.game.state.getCurrentState﻿().ClientesPorAtender<=this.game.state.getCurrentState﻿().clientesYaAtendidos){			this.game.state.getCurrentState﻿().moveUpperBanner('Last client attended');			this.game.state.getCurrentState﻿().ultimoClienteAtendido = true;			console.log('ultimo cliente atendido ' + this.game.state.getCurrentState﻿().ultimoClienteAtendido );		}}Level3.prototype.moveUpperBanner = function (data) {			this.fUpBannerTExt.text = data;			clientesBanner = this.game.add.tween(this.fUpperBanner);		    clientesBanner.to({y:-35}, 1000, Phaser.Easing.Bounce.Out);		    clientesBanner.onComplete.add(stay, this);		    clientesBanner.start();		    function stay(){			clientesBanner = this.game.add.tween(this.fUpperBanner);		    clientesBanner.to({y:-35}, 1000, Phaser.Easing.Bounce.Out);		    clientesBanner.onComplete.add(leave, this);		    clientesBanner.start();		    }			function leave(){			clientesBanner = this.game.add.tween(this.fUpperBanner);		    clientesBanner.to({y:-143}, 1000, Phaser.Easing.Bounce.Out);		    clientesBanner.onComplete.add(function(){}, this);		    clientesBanner.start();		    }}Level3.prototype.crearFlavorInstanciaAlone = function (data) {this.offset = 35	switch (data.flavor){			case 'straberry':						var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'straberryFlavor', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);			data.pot.game.state.getCurrentState﻿().fFlavor1.text--;					break;		case 'lemon':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'lemonFlavor', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);						data.pot.game.state.getCurrentState﻿().fFlavor2.text--;					break;		case 'banana':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'bannaFlavor', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);						data.pot.game.state.getCurrentState﻿().fFlavor3.text--;					break;		case 'chocolateJar':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'chocolateJar', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);					data.pot.game.state.getCurrentState﻿().fFlavor4.text--;					break;		case 'chiliJar':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'chiliJar', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);					data.pot.game.state.getCurrentState﻿().fFlavor5.text--;						break;		case 'cherryJar':			var aFlavor = data.pot.game.add.sprite(data.pot.x+this.offset, data.pot.y+this.offset, 'cherryJar', null,data.pot.game.state.getCurrentState﻿().fFlavorSlot);						data.pot.game.state.getCurrentState﻿().fFlavor6.text--;						break;	}			data.pot.game.physics.arcade.enable(aFlavor);			aFlavor.body.moves = false;			aFlavor.anchor.setTo(0.5,0.5);			aFlavor.inputEnabled =  true;			aFlavor.input.enableDrag(true);			var bounce=data.pot.game.add.tween(aFlavor);		    bounce.to({ y: data.pot.y+this.offset }, 500, Phaser.Easing.Bounce.Out);		    //bounce.onComplete.add(startBounceTween, this);		    bounce.start();		//	aFlavor.input.startDrag(this.game.input.activePointer);		    aFlavor.events.onDragStart.add(data.pot.game.state.getCurrentState﻿().onDragFlavor, this);    		aFlavor.events.onDragStop.add(data.pot.game.state.getCurrentState﻿().onStopDragFlavor, {game:this,pot:data.pot});	}Level3.prototype.myCreate = function () {	this.puedeGanar = true;	this.fUpgradeCost.visible = false;	this.isFiring =  false;	this.askingHelp = false;	this.canBuyKey = false;	this.canBuyBallMode =  false;	this.clientesYaAtendidos = 0;	this.dragginFinalCandy = false;	this.fArrows_instancia_.visible=false;	this.doingOrder =  false;	//this.fPlayer.visible =  false;	this.fChangeDirBtn.visible = false;	this.insideStore = false;	this.fStraberryFlavor.inputEnabled =  true;	this.fStraberryFlavor.input.useHandCursor = true;	//this.fStraberryFlavor.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'straberry',parent:this.fStraberryFlavor});	this.soltarStraberry = true;	this.fCookSteps.inputEnabled =  true;	this.fCookSteps.input.useHandCursor = true;	this.fCookSteps.events.onInputDown.add(this.miniTuto, this);	this.fLearnCook =  true;	this.fHelpBtn.inputEnabled =  true;	this.fHelpBtn.input.useHandCursor = true;	this.fHelpBtn.events.onInputDown.add(this.fHelpCooking, this);	this.fLemonFlavor.inputEnabled =  true;	this.fLemonFlavor.input.useHandCursor = true;	//this.fLemonFlavor.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'lemon',parent:this.fLemonFlavor});	this.soltarLemon = true;	this.fBannaFlavor.inputEnabled =  true;	this.fBannaFlavor.input.useHandCursor = true;	//this.fBannaFlavor.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'banana',parent:this.fBannaFlavor});	this.soltarBanana = true;	this.fChocolateCore.inputEnabled =  true;	this.fChocolateCore.input.useHandCursor = true;	//this.fChocolateCore.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'chocolateCore',parent:this.fChocolateCore});	this.soltarChocolate = true;	this.fCherryCore.inputEnabled =  true;	this.fCherryCore.input.useHandCursor = true;	//this.fCherryCore.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'cherryCore',parent:this.fCherryCore});	this.soltarCherry = true;	this.fChiliCore.inputEnabled =  true;	this.fChiliCore.input.useHandCursor = true;	//this.fChiliCore.events.onInputDown.add(this.crearFlavorInstancia, {game:this, flavor:'chiliCore',parent:this.fChiliCore});	this.soltarChilli = true;	this.elevatorFloor =  0;	this.insideElevator =  false;	this.fStoreGroup.visible = false;	this.houseColliding = false;	this.cannonCollinding = false;	this.fPickUpButton.visible =  false;	this.fDropCannonBtn.visible = false;	this.fUpgradeCannon.visible = false;	this.fDirections.alpha = 0;	this.game.world.setBounds(0, 0, 640, 960);		this.game.camera.follow(this.fPlayer);	 	this.fShootBtn.inputEnabled = true;	this.fShootBtn.input.useHandCursor = true;	this.fShootBtn.events.onInputDown.add(this.shoot, this);	this.fShootBtn.visible =  false;	this.fElevatorInn.inputEnabled = true;	this.fElevatorInn.input.useHandCursor = true;	this.fElevatorInn.events.onInputDown.add(this.enterElevator, this);	this.fElevatorInn.visible =  false;	this.fElevatorOut.inputEnabled = true;	this.fElevatorOut.input.useHandCursor = true;	this.fElevatorOut.events.onInputDown.add(this.exitElevator, this);	this.fElevatorOut.visible =  false;	this.fEnterHouseBtn.inputEnabled = true;	this.fEnterHouseBtn.input.useHandCursor = true;	this.fEnterHouseBtn.events.onInputDown.add(this.enterHouse, this);	this.fEnterHouseBtn.visible = false;	this.fExitHouseBtn.inputEnabled = true;	this.fExitHouseBtn.input.useHandCursor = true;	this.fExitHouseBtn.events.onInputDown.add(this.exitHouse, this);	this.fExitHouseBtn.visible = false;	this.fGunBuyBtn.inputEnabled = true;	this.fGunBuyBtn.input.useHandCursor = true;	this.fGunBuyBtn.events.onInputDown.add(this.buyGun, this);	this.fGunBuyBtn.visible = true;	this.fKeyBuyBtn.inputEnabled = true;	this.fKeyBuyBtn.input.useHandCursor = true;	this.fKeyBuyBtn.events.onInputDown.add(this.buyKey, this);	this.fKeyBuyBtn.visible = true;	this.fCannonBuyBtn.inputEnabled = true;	this.fCannonBuyBtn.input.useHandCursor = true;	this.fCannonBuyBtn.events.onInputDown.add(this.buyCannon, this);	this.fCannonBuyBtn.visible = true;	this.fBallModeBtn.inputEnabled = true;	this.fBallModeBtn.input.useHandCursor = true;	this.fBallModeBtn.events.onInputDown.add(this.BuyBallMode, this);	this.fBallModeBtn.visible = true;	this.fPickUpButton.inputEnabled = true;	this.fPickUpButton.input.useHandCursor = true;	this.fPickUpButton.events.onInputDown.add(this.pickUp, this);	this.fUpgradeCannon.inputEnabled = true;	this.fUpgradeCannon.input.useHandCursor = true;	this.fUpgradeCannon.events.onInputDown.add(this.upgradeCannon, this);	this.fChangeDirBtn.inputEnabled = true;	this.fChangeDirBtn.input.useHandCursor = true;	this.fChangeDirBtn.events.onInputDown.add(this.changeCannonDir, this);	this.fDropCannonBtn.inputEnabled = true;	this.fDropCannonBtn.input.useHandCursor = true;	this.fDropCannonBtn.events.onInputDown.add(this.placeCannon, this);    this.weapon = this.game.add.weapon(40, 'bullet2');    this.weapon.setBulletFrames(0, 80, true);    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;    this.weapon.bulletSpeed = 1200;    this.weapon.fireRate = 50;     //  this.weapon.trackSprite(this.fPlayer, 0, 0, true);         this.fOpenStoreBtn.inputEnabled = true;    this.fOpenStoreBtn.input.useHandCursor = true;    this.fOpenStoreBtn.events.onInputDown.add(this.openStore, this);    this.isOpenStore =  false;    this.fCloseStoreBtn.inputEnabled = true;    this.fCloseStoreBtn.input.useHandCursor = true;    this.fCloseStoreBtn.events.onInputDown.add(this.closeStore, this);   	this.fCloseStoreBtn.visible =  false;    this.fDenyOrderBtn.inputEnabled = true;    this.fDenyOrderBtn.input.useHandCursor = true;    this.fDenyOrderBtn.events.onInputDown.add(this.denyOrder, this);   	this.fDenyOrderBtn.visible =  false;	this.estoyAbajo = new Phaser.Signal();	this.estoyAbajo.add(this.goinDown, this);	this.beenHit = false; //variable para detectar si algun enemigo ha topado al jugador	emitter = this.game.add.emitter(0, 0, 20);		this.game.physics.arcade.enable(emitter);	emitter.enableBody=true;    emitter.makeParticles(['candy1','candy2','candy3']);    emitter.gravity = 400;	    emitter.bounce.setTo(0.5, 0.5);    	cursors = this.input.keyboard.createCursorKeys();    fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR); //boton de disparo    fireButton.onDown.add(this.shoot, this);  //  fireButton.onUp.add(function(){this.fPlayer.animations.play('idle')}, this);	this.game.sound.mute = false;	this.fMenuBtn.inputEnabled = true;	this.fMenuBtn.events.onInputUp.add(this.manejarPausa,this);  //pausar juego  	this.game.input.onDown.add(this.unpause, this); //quitar pausa			var girlAskHelp = this.game.time.create(false); //animacion de pedir ayuda de la chica    girlAskHelp.loop(18000, function(){			jumpingHelp = this.game.add.tween(this.fChick);		    jumpingHelp.to({y:727}, 500, Phaser.Easing.Bounce.Out);		    jumpingHelp.onComplete.add(stay, this);		 	jumpingHelp.start();		    function stay(){			jumpingHelp2 = this.game.add.tween(this.fChick);		    jumpingHelp2.to({y:727}, 100, Phaser.Easing.Bounce.Out);		    jumpingHelp2.onComplete.add(leave, this);		    jumpingHelp2.start();		    }		    function leave(){			jumpingHelp3 = this.game.add.tween(this.fChick);		    jumpingHelp3.to({y: 747}, 500, Phaser.Easing.Bounce.Out);   			jumpingHelp3.start();		    }    }, this);	girlAskHelp.start();var moverAyuda = this.game.time.create(false); //animacion de pedir ayuda de la chica    moverAyuda.loop(5000, function(){			mover1 = this.game.add.tween(this.fHelpBtn);		    mover1.to({y:242}, 500, Phaser.Easing.Bounce.Out);		    mover1.onComplete.add(stay, this);		 	mover1.start();		    function stay(){			mover2 = this.game.add.tween(this.fHelpBtn);		    mover2.to({y:242}, 100, Phaser.Easing.Bounce.Out);		    mover2.onComplete.add(leave, this);		    mover2.start();		    }		    function leave(){			mover3 = this.game.add.tween(this.fHelpBtn);		    mover3.to({y: 249}, 500, Phaser.Easing.Bounce.Out);   			mover3.start();		    }    }, this);	moverAyuda.start();			BgMusic = this.game.add.audio('BgMusic', 0.3); //agregar musica y volumen	BgMusic.allowMultiple = false;	BgMusic.loop = true;	BgMusic2 = this.game.add.audio('BgMusic2', 0.3); //agregar musica y volumen	BgMusic2.allowMultiple = false;	BgMusic2.loop = true;		var BgMusicSelector = Math.round(Math.random()) //agreagar musica de bg randomicamente	if(BgMusicSelector >= 0.5 && musicEnabled){		this.BgMusic = 1;		BgMusic.play();			}	if(BgMusicSelector <= 0.5 && musicEnabled){		this.BgMusic = 2;		BgMusic2.play();			}	zombieWound1 = this.game.add.audio('zombieWound1', 0.2);	zombieWound1.allowMultiple = false;	zombieWound1.addMarker('zombieWound1', 0, 0.15	);		zombieWound2 = this.game.add.audio('zombieWound2', 0.2);	zombieWound2.allowMultiple = false;	zombieWound2.addMarker('zombieWound2', 0, 0.15	);	zombieWound3 = this.game.add.audio('zombieWound3', 0.2);	zombieWound3.allowMultiple = false;	zombieWound3.addMarker('zombieWound3', 0, 0.15	);	zombieWound4 = this.game.add.audio('zombieWound4', 0.2);	zombieWound4.allowMultiple = false;	zombieWound4.addMarker('zombieWound4', 0, 0.15	);	brainsAudio = this.game.add.audio('brainsAudio');	brainsAudio.allowMultiple = false;	brainsAudio.addMarker('brainsAudio', 0, 0.6	);	jumpBall = this.game.add.audio('jumpBall');	jumpBall.allowMultiple = false;	jumpBall.addMarker('jumpBall', 0, 0.13	);	shoot = this.game.add.audio('shoot');	shoot.allowMultiple = false;	shoot.addMarker('shoot', 0, 0.3);	luckyBall = this.game.add.audio('luckyBall');	luckyBall.allowMultiple = false;	luckyBall.addMarker('luckyBall', 0, 0.619);	death = this.game.add.audio('death');	death.allowMultiple = false;	death.addMarker('death', 0, 2.26);	cortar = this.game.add.audio('cortar');	cortar.allowMultiple = false;	cortar.addMarker('cortar', 0, 0.92);	levelUpSound = this.game.add.audio('levelUpSound');	levelUpSound.allowMultiple = false;	levelUpSound.addMarker('levelUpSound', 0, 1.10);	getCoin = this.game.add.audio('getCoin');	getCoin.allowMultiple = false;	getCoin.addMarker('getCoin', 0, 0.25);	gotIngredient = this.game.add.audio('gotIngredient');	gotIngredient.allowMultiple = false;	gotIngredient.addMarker('gotIngredient', 0, .38);	openStore = this.game.add.audio('openStore');	openStore.allowMultiple = false;	openStore.addMarker('openStore', 0, 1);	win = this.game.add.audio('win');	win.allowMultiple = false;	win.addMarker('win', 0, 1.7);	buy = this.game.add.audio('buy');	buy.allowMultiple = false;	buy.addMarker('buy', 0, 1.5);	boil = this.game.add.audio('boil');	boil.allowMultiple = false;	boil.addMarker('boil', 0, 1.4);	ding = this.game.add.audio('ding');	ding.allowMultiple = false;	ding.addMarker('ding', 0, 1.4);	pop = this.game.add.audio('pop');	pop.allowMultiple = false;	pop.addMarker('pop', 0, 1);	gunReload = this.game.add.audio('gunReload');	gunReload.allowMultiple = false;	gunReload.addMarker('gunReload', 0, 1);	shuperShot = this.game.add.audio('shuperShot');	shuperShot.allowMultiple = false;	shuperShot.addMarker('shuperShot', 0, 1);	gotKey = this.game.add.audio('gotKey');	gotKey.allowMultiple = false;	gotKey.addMarker('gotKey', 0, 0.7);	rollUpgrade = this.game.add.audio('rollUpgrade');	rollUpgrade.allowMultiple = false;	rollUpgrade.addMarker('rollUpgrade', 0, 0.5);	this.fxSounds = [rollUpgrade,gotKey,jumpBall,luckyBall,death, levelUpSound,cortar, shoot,zombieWound1,zombieWound2,zombieWound3,zombieWound4,brainsAudio,getCoin,gotIngredient,win,openStore,boil,buy,ding,pop,gunReload,shuperShot]; //agreagar aqui todos los sound fx que se necesita adminstrar	if(!fxEnabled){		this.fxSounds.forEach(function(soundFx) { 	 //en caso de que se deshabilite los sonidos fxs		soundFx.mute = true;	},this);	}			this.swipeCoordX = 0;	this.swipeCoordX2 = 0;	this.swipeCoordY = 0;	this.swipeCoordY2 = 0;	this.VectorX = 0;	this.VectorY = 0;	this.PowerX = 0	this.DirX = 0;	this.PowerY = 0	this.DirY = 0;	this.ExtraPowerY = 3;	this.ExtraPowerX = 3;	this.wannaJump = false;	this.minJumpIntention = 65;	this.maxPowerX = 90;	this.cascaritas = 0;	this.jumpingPower = 460;		this.game.input.onDown.add(function(pointer) { //manejo de swipe control de pantalla			this.swipeCoordX = pointer.x;  			this.swipeCoordY = pointer.y;   							}, this);   	this.game.input.onUp.add(this.swipeUpAction, this);  //manejo de swipe UP control de pantalla	this.level = 1;	this.clientesListos = [];	this.zombiesListos = [];	this.bajoAlbasement =  false;	this.siguienteFaseClientes =  false;	this.siguienteFaseClientes =  false;	this.ultimoClienteAtendido = true;	this.ultimoZobieEliminado  = true;	this.firstime =  true;	this.firstimeUpperBAnner = true;	this.OldeadaEnCurso =  false;	this.zombiesPorEliminar = 0;	this.ClientesPorAtender = 0;	/*	this.crearZombies = this.game.time.create(false); //crear zombies        this.crearZombies.loop(6000, this.crearUnZombie, this);    this.crearZombies.start();	this.crearClientes = this.game.time.create(false); //crear clientes        this.crearClientes.loop(20000, this.crearUnCliente, this);    this.crearClientes.start();*/};Level3.prototype.buyKey = function () {	if(!this.fPlayer.hasKey && this.canBuyKey){		gotKey.play('gotKey');		this.fPlayer.myCoins-=this.fKeyCost.text;		this.fPlayer.hasKey = true;	}}Level3.prototype.BuyBallMode = function () { //cancelo la orden reduciendo el tiempo de espera del cliente a cero	if(this.canBuyBallMode && !this.fPlayer.hasBallMode){		rollUpgrade.play('rollUpgrade');		this.fPlayer.myCoins-=this.fRollValue.text;		this.fPlayer.hasBallMode = true;		this.game.state.getCurrentState﻿().moveUpperBanner('Now you can roll');	}	}Level3.prototype.denyOrder = function () { //cancelo la orden reduciendo el tiempo de espera del cliente a cero	this.fDenyOrderBtn.visible =  false;	this.fClientes.children[0].waitTime = 0;	this.fClientes.children[0].orderBG.saborCreado = '';	}Level3.prototype.openStore = function () { //abrir la tienda para que venga los clientes	openStore.play('openStore');	this.isOpenStore = true;	this.fCloseStoreBtn.visible=true;	this.fOpenStoreBtn.visible=false;	this.prepararClientes(false);	console.log("this.isOpenStore " + this.isOpenStore);}Level3.prototype.closeStore = function () {	if(this.fClientes.length>0){		this.crearClientes.destroy();	}this.isOpenStore = false;this.fCloseStoreBtn.visible=false;this.fOpenStoreBtn.visible=true;console.log("this.isOpenStore " + this.isOpenStore);}Level3.prototype.prepararZombies = function (estado) {	console.log(estado);	if(estado){		this.puedeGanar = true;		console.log('preparar zombies antes de salir');			var numZombies = this.level*2.5;		this.zombiesPorEliminar =  numZombies;		if(numZombies>100){numClientes=100} //maximo numero de prezombies para crear 			for(var i = 0; i<numZombies; i++){				var zombies = {tipo:1}; //creo lista  de prezomvies				this.zombiesListos.push(zombies);			}			this.ultimoZobieEliminado = false;			console.log(this.zombiesListos);			}else{			this.puedeGanar = false;			this.randomCoins(true);			console.log('botar zombies');			if(this.zombiesListos.length >= 1){		    	this.creaZombie = this.game.time.create(false); //crear zombies   		this.creaZombie.loop(Math.random()*10000, function(){   			 //si existen preclientes entonces los creo				console.log('anunciandoZombies');   				var clienteNuevo = this.zombiesListos.pop(); //elimino un prezombie   				this.crearUnZombie(); //creo un zombie   		}, this);	}else{			this.siguienteFaseZombies =  true;   			console.log('no hay mas zombies'); //que hacer cuando no hay mas clientes   				   			}    	this.creaZombie.start();		}	}Level3.prototype.prepararClientes = function (estado) {	if(estado){		this.clientesYaAtendidos = 0;		this.firstimeUpperBAnner=false;		console.log('preparar clientes antes de salir');			var totalProductStore = parseInt(this.fFlavor1.text)  + parseInt(this.fFlavor2.text)   +parseInt(this.fFlavor3.text)  + parseInt(this.fFlavor4.text)   +parseInt(this.fFlavor5.text)  + parseInt(this.fFlavor6.text) ;		var promedioPorductos = totalProductStore / 6;		console.log('promedio ' + promedioPorductos);		var numClientes = Math.ceil(promedioPorductos);		if(numClientes < 1){numClientes=1};		if(numClientes>12){numClientes=12}; //maximo numero de clientes para crear 		this.ClientesPorAtender =  numClientes;		this.fClientsRemain.text = this.ClientesPorAtender;			for(var i = 0; i<numClientes; i++){			var cliente = {}; //creo lista   preclientes			this.clientesListos.push(cliente);		}			this.ultimoClienteAtendido = false;		console.log(this.clientesListos);		}else{		    if(this.clientesListos.length >= 1){    	if(typeof(this.crearClientes)!="undefined"){    		this.crearClientes.destroy();    	}		    	this.crearClientes = this.game.time.create(false); //crear clientes   		this.crearClientes.loop(Math.random()*10000, function(){   			 //si existen preclientes entonces los creo				console.log('anunciandoClientes');   				var clienteNuevo = this.clientesListos.pop(); //suelto un precliente   				this.crearUnCliente();   		}, this);	}else{			this.siguienteFaseClientes =  true;			this.moveUpperBanner('last client has come');   			console.log('no hay mas clientes'); //que hacer cuando no hay mas clientes   				   			}    	this.crearClientes.start();	}}Level3.prototype.crearUnCliente = function () {	this.crearClientes.destroy();	console.log('creandoClientes');	randomCliente = Math.ceil(Math.random()*3);	switch(randomCliente){		case 1:		var _cliente = new client1(this.game, 1353, 157);		break;		case 2:		var _cliente = new client2(this.game, 1353, 157);		break;		case 3:		var _cliente = new client3(this.game, 1353, 157);		break;	}			this.fClientes.add(_cliente);		this.prepararClientes(false);	}Level3.prototype.crearUnZombie = function () {	this.creaZombie.destroy();	var xpos = 297;	var ypos = 384;		var wichZombie = Math.ceil(Math.random()*2);	console.log('level ' + this.level);	if(this.level>=4){		switch(wichZombie){			case 1:			var zombie = new zombie2(this.game, xpos, ypos);			break;			case 2:			console.log('wichZombie ' + wichZombie);			var zombie = new zombie3(this.game, xpos, ypos);			break;		}	}else{		var zombie = new zombie2(this.game, xpos, ypos);		}	zombie.life*=(this.level*0.5);	this.fEnemies.add(zombie);	this.prepararZombies(false);}Level3.prototype.shoot = function () {			if(this.fPlayer.hasPistol && !this.fPlayer.ballMode){				this.isFiring = true;				this.wannaShoot = true;				this.fShootBtn.tint =   0xBB2323;				this.fShootBtn.inputEnabled = false;				var enableWeaponTimer = this.game.time.create(false);				enableWeaponTimer.loop(8000, enableWeapon, this);				enableWeaponTimer.start();function enableWeapon(){				enableWeaponTimer.destroy();				this.fShootBtn.tint =   0xffffff;				this.fShootBtn.inputEnabled = true;			}			shuperShot.play('shuperShot');			this.shuperShot = this.fPlayer.animations.play('shuperShot');			this.shuperShot.onComplete.add(function(){				this.isFiring = false;				this.wannaShoot = false;				this.fPlayer.animations.play('idle');									if(this.fPlayer.scale.x>0){				 this.weapon.trackSprite(this.fPlayer, 35, 10);				 this.weapon.fireAngle =  0;				}else{				 this.weapon.trackSprite(this.fPlayer, -35, 10);				 this.weapon.fireAngle =  180;				}				//this.weapon.bulletAngleOffset = 90;			 this.weapon.fire();														}, this);							//this.weapon.fire(this.fPlayer.x+(2*this.fPlayer.scale.x),this.fPlayer.y);}}Level3.prototype.hitPlayer = function (player, enemy) { //restart o reiniciar nivelthis.fPlayer.alpha=0.5;this.fPlayer.body.bounce.x=0.5; this.bool=true;	  if(!this.beenHit){ this.beenHit =  true;  	this.glow = player.game.time.create(false);    this.glow.loop(100, function(){    	this.bool = !this.bool;    	if(this.bool){			this.fPlayer.alpha=0.5;    	}else{			this.fPlayer.alpha=1;    	}    	 		    }, this);    this.glow.start(); 	this.isHitTimer = player.game.time.create(false);    this.isHitTimer.loop(3000, function(){    	 this.beenHit =  false;			player.life-=15;			console.log(player.life);    	 	player.alpha=1;    	 	player.body.bounce.x=0;    	 	this.beenHit =  false; 			this.glow.destroy(); 				 this.isHitTimer.destroy(); 				 if(player.life<=0){ 				 	this.game.state.start("looseScreen",true,true); 				 }    }, this);    this.isHitTimer.start(); }}Level3.prototype.crearMoneda = function (enemy) {	var _coin = new coin(this.game, enemy.world.x, enemy.world.y);	this.fCoins.add(_coin);	}Level3.prototype.soltarFlavor = function (enemy) {	var item1Drop = Math.ceil(Math.random()*3);	var item2Drop =  Math.ceil(Math.random()*3);	switch(item1Drop){		case 1:		var ingredientPiece1 = this.add.sprite(enemy.world.x, enemy.world.y, 'straberryFlavor', null, this.game.state.getCurrentState﻿().fCoins);		break;		case 2:		var ingredientPiece1 = this.add.sprite(enemy.world.x, enemy.world.y, 'lemonFlavor', null, this.game.state.getCurrentState﻿().fCoins);		break;		case 3:		var ingredientPiece1 = this.add.sprite(enemy.world.x, enemy.world.y, 'bannaFlavor', null, this.game.state.getCurrentState﻿().fCoins);		break;		}		ingredientPiece1.anchor.set(0.5, 0.5);	    this.game.physics.arcade.enable(ingredientPiece1);	    ingredientPiece1.body.gravity.y = 800.0;	switch(item2Drop){		case 1:		var ingredientPiece2 = this.add.sprite(enemy.world.x, enemy.world.y, 'chocolateCore', null, this.game.state.getCurrentState﻿().fCoins);		break;		case 2:		var ingredientPiece2 = this.add.sprite(enemy.world.x, enemy.world.y, 'chiliCore', null, this.game.state.getCurrentState﻿().fCoins);		break;		case 3:		var ingredientPiece2 = this.add.sprite(enemy.world.x, enemy.world.y, 'cherryCore', null, this.game.state.getCurrentState﻿().fCoins);		break;			}		ingredientPiece2.anchor.set(0.5, 0.5);	    this.game.physics.arcade.enable(ingredientPiece2);	    ingredientPiece2.body.gravity.y = 800.0;				}	Level3.prototype.hitEnemy = function (bullet, enemy) {		zombieHitSoundNumber = Math.ceil(Math.random()*4);	switch (zombieHitSoundNumber){		case 1:		zombieWound1.play('zombieWound1');		break;		case 2:		zombieWound2.play('zombieWound2');		break;		case 3:		zombieWound3.play('zombieWound3');		break;		case 4:		zombieWound4.play('zombieWound4');		break;	}    enemy.life--;	if(bullet.key != 'bullet2'){		bullet.kill();		enemy.life--;	}else{		enemy.life-=20;	}   if(enemy.life<=0){ //muere el enemigo   			emitter.setXSpeed(0, 600*Math.sign(bullet.body.velocity.x));    emitter.x = enemy.world.x;    emitter.y = enemy.world.y;	emitter.setAlpha(0.3, 0.8,500, Phaser.Easing.Linear.None, false);    emitter.setScale(0.5, 1);    emitter.start(true, 1000, null, 10);   		var index = enemy.currentPlatform.data.zombiesWalking.indexOf(enemy);   		console.log("index "  + index)			if (index > -1) {			  enemy.currentPlatform.data.zombiesWalking.splice(index, 1); //retiro el zombie de la plataforma para que no sigan disparando las gallinas 			}   		var probabilidad =  Math.ceil(Math.random()*100);   		if(probabilidad>90){   			this.game.state.getCurrentState﻿().crearMoneda(enemy);   		}else{			this.game.state.getCurrentState﻿().soltarFlavor(enemy);   		}	//	this.game.state.getCurrentState﻿().zombiesPorEliminar--;   	enemy.destroy();   }			console.log('xombiesPorEliminad '+ this.game.state.getCurrentState﻿().zombiesPorEliminar);	if(this.game.state.getCurrentState﻿().zombiesPorEliminar<=0){		console.log('ultimoZombieEliminado');		this.game.state.getCurrentState﻿().moveUpperBanner('No zombies comming');		this.game.state.getCurrentState﻿().randomCoins(false);		this.game.state.getCurrentState﻿().ultimoZobieEliminado = true;		this.puedeGanar =  true;	}}Level3.prototype.placeCannon = function () {	this.fPlayer.myCannons--;	var _cannon1 = new cannon(this.game, this.fPlayer.x, this.fPlayer.y-this.fPlayer.height);	if(this.fPlayer.myCannonsUpgrades.length>0){	_cannon1.cannonlevel=this.fPlayer.myCannonsUpgrades.pop();	_cannon1.checkCannonLevel();	} //coloco el mismo nivel de cannon que tenia antes	//_cannon1.beginFire();	this.fCannons.add(_cannon1);}Level3.prototype.changeCannonDir = function () {this.wannaChange =  true;}Level3.prototype.pickUp = function () {this.pickUped = true;}Level3.prototype.upgradeCannon = function () {this.wannaUpgrade = true;}Level3.prototype.isCollinding = function (player,cannon) { //is collinding with cannons	cannonLevel = cannon.cannonLevel;	var cannonCost = cannon.upgradeCost*cannon.cannonlevel;		if(player.myCoins >= cannonCost && !cannon.upgrading){				this.fUpgradeCost.text= cannonCost;		this.fUpgradeCost.visible = true;		if(cannon.cannonlevel<3){		this.fUpgradeCannon.tint =  0xffffff;		this.fUpgradeCannon.visible=true;		if(this.wannaUpgrade){			cannon.upgradeLevel();			player.myCoins-=cannon.upgradeCost;			this.wannaUpgrade = false;		}		}else{			this.fUpgradeCost.visible = false;			this.fUpgradeCannon.tint =   0xBB2323;		}	}else{			this.fUpgradeCost.visible = false;			this.fUpgradeCannon.visible=false;			this.fUpgradeCannon.tint =   0xBB2323;	}	if(this.wannaChange ){		cannon.changeDirection();				this.wannaChange =  false;	}	if(this.pickUped ){		cannon.visible=false;		player.myCannonsUpgrades.push(cannon.cannonlevel);	//	cannon.timer.destroy();		cannon.weapon.destroy();		cannon.destroy();		this.pickUped=false;		player.myCannons++;		player.myWeapons++;		}}Level3.prototype.collectCoin = function (player,coin) {		if(coin.key=='atlas4'){		getCoin.play('getCoin');		this.fPlayer.myCoins++;	}else{		if(coin.key=='straberryFlavor'){			this.fFlavor1.text++;		}		if(coin.key=='lemonFlavor'){			this.fFlavor2.text++;		}		if(coin.key=='bannaFlavor'){			this.fFlavor3.text++;		}		if(coin.key=='chocolateCore'){			this.fFlavor4.text++;		}		if(coin.key=='chiliCore'){			this.fFlavor5.text++;		}		if(coin.key=='cherryCore'){			this.fFlavor6.text++;		}		gotIngredient.play('gotIngredient');	}	coin.destroy();		}Level3.prototype.hitWall = function (bullet,pared) {		bullet.kill();}Level3.prototype.changeDirection = function (caja,zombie) {	if(zombie.chocado == false){		if (zombie != zombie.zombieChocado){ //este pedazo hizo ruchis cabreada, las variables locales hizo pat								zombie.chanceDirection.dispatch();				zombie.chocado = true;				zombie.zombieChocado = zombie;			} else{zombie.zombieChocado=null;}	}else{		zombie.chocado = false;			}	}Level3.prototype.randomCoins = function (estado) {	console.log('generando monedas');if(estado){	randomTime =  Math.ceil(Math.random()*10)*1000;	if(randomTime<5000){		randomTime =  5000;	} var timer = this.game.time.create(false);    timer.loop(randomTime, function(){    	var randomPlatform = Math.ceil(Math.random()*this.state.getCurrentState﻿().fPlatforms.length-1);    	var platform = this.state.getCurrentState﻿().fPlatforms.children[randomPlatform];        	if(platform.data.name == "topCeil"){    		platform = this.fFloorNew;    	}    	console.log(randomPlatform);    	xCoinPos = Math.random()*this.game.width;    	if(xCoinPos<100 || xCoinPos>540){    		xCoinPos = this.game.width/2;    	}    	var _coin = new coin(this.game,xCoinPos , platform.world.y-20);    	_coin.timed();		this.fCoins.add(_coin);		timer.destroy();    }, this);    timer.start();}	}Level3.prototype.enterStore = function (player,store) {this.fPlayer.playerBall.alpha=0;this.fEnterHouseBtn.visible = true;}Level3.prototype.enterHouse = function () {		 this.game.world.bringToTop(this.fStoreGroup);this.fPlayer.visible=false;this.fPlayer.playerBall.alpha=0;this.fPlayer.body.moves = false;this.fEnterHouseBtn.visible = false;this.fExitHouseBtn.visible = true;this.fStoreGroup.visible = true;this.insideStore =  true;}Level3.prototype.exitHouse = function () {	//this.crearClientes.destroy();this.fPlayer.visible=true;this.fPlayer.body.moves = true;this.fEnterHouseBtn.visible = true;this.fExitHouseBtn.visible = false;this.fStoreGroup.visible = false;this.closeStore();}Level3.prototype.buyGun = function () {	if(!this.fShootBtn.visible){		if(this.fPlayer.myCoins/this.fGunValue.text>=1){		gunReload.play('gunReload');		this.fShootBtn.visible =  true;		this.fPlayer.hasPistol = true;		this.fPlayer.myCoins-=10;		this.fPlayer.myWeapons++;		}	}}Level3.prototype.buyCannon = function () {	if(this.fPlayer.myCoins/this.fCannonValue.text>=1){		gunReload.play('gunReload');	this.fPlayer.myCannons++;	this.fPlayer.myCoins-=this.fCannonValue.text;	this.fPlayer.myWeapons++;	}	}Level3.prototype.elevatorAction = function () {this.fElevatorInn.visible =  true;	}Level3.prototype.enterElevator = function () {this.fElevatorInn.visible =  false;			this.fElevatorOut.visible =  true;		//this.game.camera.follow(this.fAscensor1);		this.openElevator = this.fAscensor1.animations.play('open', 30, false);		this.openElevator.onComplete.add(function(){			if(this.fPlayer.hasPistol){				this.fShootBtn.visible =  false;			}			this.fPlayer.position.setTo(this.fAscensor1.x,this.fAscensor1.y);			this.fAscensor1.animations.play('close', 30, false);			this.fPlayer.alpha=0;						this.fPlayer.moves = false;									this.fShootBtn.visible=false;			this.fDropCannonBtn.visible =  false;			this.insideElevator =  true;			this.fAscensor1.body.moves = true;					//this.fAscensor1.inmovable =  false;			}, this);		}Level3.prototype.exitElevator = function () {this.fPlayer.body.moves= true;	this.fAscensor1.body.velocity.y=0;	this.fElevatorInn.visible =  true;			this.fElevatorOut.visible =  false;	this.openElevator = this.fAscensor1.animations.play('open', 30, false);	if(!this.bajoAlbasement && this.fPlayer.y>=270 && this.zombiesListos.length > 0 && !this.OldeadaEnCurso){			this.OldeadaEnCurso = true;			this.bajoAlbasement = true;			this.iniciarOleada();		}	this.openElevator.onComplete.add(function(){		if(this.fPlayer.hasPistol){				this.fShootBtn.visible =  true;			}		this.fAscensor1.animations.play('close', 30, false);		this.fPlayer.position.setTo(this.fAscensor1.x,this.fAscensor1.y);		if(this.fPlayer.y<270){				this.bajoAlbasement = false;				console.log('estoy poniendo que bajo al basemant');		}				//this.game.camera.follow(this.fPlayer);		this.fPlayer.moves = true;			this.fPlayer.alpha=1;									if(this.fPlayer.hasPistol){				this.fShootBtn.visible=true;			}						this.fDropCannonBtn.visible =  true;			this.insideElevator =  false;			}, this);	}Level3.prototype.fHelpCooking = function () {console.log('helping');		this.fCookSteps.visible = true;	}Level3.prototype.miniTuto = function () {if(this.fLearnCook=true){	this.fCookSteps.visible = false;	this.fLearnCook = false;}else{	this.fCookSteps.visible = true;	this.fLearnCook = true;}}Level3.prototype.iniciarOleada = function () {			this.bajoAlbasement = false;			this.fOleadaNumero.text =  this.level;			oleadaBanner = this.game.add.tween(this.fGroupCheer);		    oleadaBanner.to({y:-6}, 1000, Phaser.Easing.Bounce.Out);		    oleadaBanner.onComplete.add(stay, this);		    oleadaBanner.start();		    function stay(){			oleadaBanner2 = this.game.add.tween(this.fGroupCheer);		    oleadaBanner2.to({y:-6}, 1000, Phaser.Easing.Bounce.Out);		    oleadaBanner2.onComplete.add(leave, this);		    oleadaBanner2.start();		    }			function leave(){			oleadaBanner3 = this.game.add.tween(this.fGroupCheer);		    oleadaBanner3.to({y:131}, 1000, Phaser.Easing.Bounce.Out);		    oleadaBanner3.onComplete.add(function(){		    	this.prepararZombies(false);		    } , this);		    oleadaBanner3.start();		    }}Level3.prototype.findeOleada = function () {if(this.firstime){	var banner =  this.fWelcome;//	this.fPlayer.y=-300;		    		//	this.fPlayer.visible=true;	}else{	var banner = this.fGreatJob;}			greatJobBanner = this.game.add.tween(banner);		    greatJobBanner.to({y:827}, 1000, Phaser.Easing.Bounce.Out);		    greatJobBanner.onComplete.add(stay, this);		    greatJobBanner.start();		    function stay(){			greatJobBanner = this.game.add.tween(banner);		    greatJobBanner.to({y:827}, 1000	, Phaser.Easing.Bounce.Out);		    greatJobBanner.onComplete.add(leave, this);		    greatJobBanner.start();		    }			function leave(){			greatJobBanner = this.game.add.tween(banner);		    greatJobBanner.to({y:963}, 1000, Phaser.Easing.Bounce.Out);		    greatJobBanner.onComplete.add(function(){		    	//this.prepararZombies(false);		    	if(this.firstime){		    				    	}		    		    } , this);		    greatJobBanner.start();		    }	this.firstime =  false;}Level3.prototype.goinDown = function () {	this.fAscensor1.body.velocity.y=180;}Level3.prototype.askHelp = function () {this.fPlayer.body.bounce.set(0.1);	if(this.fPlayer.hasKey){console.log( 'this.puedeGanar ' + this.puedeGanar)	if(this.puedeGanar){		this.game.state.start("winScreen",true,true);	}else{	this.game.state.getCurrentState﻿().moveUpperBanner('Destroy all zombies!');	}			}else{			if(!this.askingHelp){			this.game.state.getCurrentState﻿().moveUpperBanner('HELP! BUY A KEY!');			this.askingHelp = true;			timer = this.game.time.create(false);			timer.loop(2000, function(){				this.askingHelp = false;				timer.destroy();			}, this);			timer.start();		}			}}Level3.prototype.cannonFireCheck = function (cannon, platform) {cannon.fireIfZombie(cannon,platform);}Level3.prototype.eatGirl = function (cannon, platform) {	console.log('girlEaten, you loose');	BgMusic2.stop();	BgMusic.stop();			this.game.state.start('looseScreen');}Level3.prototype.update = function () {	this.fUpgradeCost.visible = false;	this.fClientsRemain.text = this.ClientesPorAtender - this.clientesYaAtendidos; //contador de clientes por atender	this.fYourMoney.text = this.fPlayer.myCoins;	this.fMoneyCount.text = this.fPlayer.myCoins;	this.houseColliding = this.game.physics.arcade.overlap(this.fPlayer , this.fStore, this.enterStore, null, this);	this.elevatorColliding =this.game.physics.arcade.collide(this.fAscensor1 , this.fPlayer, this.elevatorAction, null, this);	this.ladderCollider = this.game.physics.arcade.overlap(this.fPlayer , this.fEscaleras);	this.cannonCollinding = this.game.physics.arcade.overlap(this.fPlayer , this.fCannons, this.isCollinding, null, this);	this.cannonCollindingPlatform = this.game.physics.arcade.collide(this.fCannons , this.fPlatforms, this.cannonFireCheck, null, this);	this.enemiCollinding = this.game.physics.arcade.collide(this.fPlayer , this.fEnemies, this.hitPlayer, function() {  if (this.fPlayer.enableObstacleCollide) {    return true;  }  return false;}, this);	this.chickRoomCollide = this.game.physics.arcade.collide(this.fPlayer , this.fChickRoomUp, this.askHelp,null, this);	this.chickRoomCollideZombie = this.game.physics.arcade.collide(this.fEnemies , this.fChickRoomUp, this.eatGirl,null, this);	this.game.physics.arcade.overlap(this.fDirections , this.fEnemies, this.changeDirection, null, this);	this.game.physics.arcade.overlap(this.fPlayer , this.fCoins, this.collectCoin, null, this);	this.game.physics.arcade.collide(this.fCoins , this.fPlatforms);	this.game.physics.arcade.collide(this.fCannons , this.fAscensor1);	this.game.physics.arcade.collide(this.fPlayer , this.fWalls);	this.game.physics.arcade.collide(this.fPlayer , this.fPipes);	this.game.physics.arcade.collide(this.fEnemies , this.fWalls);	//this.game.physics.arcade.collide(this.fEnemies , this.fCannons);//en caso de que ser requiera habilitar collision entre cannons y enemies		this.game.physics.arcade.collide(this.fPlayer , this.fElevators);	this.game.physics.arcade.collide(this.fPlayer , this.fPlatforms); 				this.game.physics.arcade.overlap(this.weapon.bullets, this.fPlatforms, this.hitWall, null, this);	this.game.physics.arcade.overlap(this.weapon.bullets, this.fEnemies, this.hitEnemy, null, this);if(this.dragginFinalCandy){ //aparecer o desaparecer la flecha de la orden final	this.fArrows_instancia_.visible=true; }else{	this.fArrows_instancia_.visible=false;}if(this.doingOrder){	this.fDenyOrderBtn.visible=true;}else{	this.fDenyOrderBtn.visible=false;}if(this.siguienteFaseClientes && this.siguienteFaseZombies){ //preparar siguiente nivel		this.level++;	this.siguienteFaseZombies = false;	this.siguienteFaseClientes = false;}//console.log("cliente " + this.ultimoClienteAtendido + ' '+ "zombies " + this.ultimoZobieEliminado);if(this.ultimoClienteAtendido && this.ultimoZobieEliminado){ //preparar clientes y zombies para el siguiente nivel	this.OldeadaEnCurso = false;	console.log('pantalla de puntuacion y rewards');	 var timer = this.game.time.create(false);	  timer.loop(2000, function(){ //demorar un poco para emitir fin de oleada	  	win.play('win');	  	this.findeOleada(); 	  	timer.destroy();	  }, this);	  timer.start();		this.prepararClientes(true);	this.prepararZombies(true);	}if(!this.ladderCollider ){	this.fPlayer.body.gravity.y = 800; //para retomar la gravedad despues de usar la escalerea}if(this.ladderCollider && this.usingLadder){this.fPlayer.body.gravity.y=0;}else{	this.usingLadder =  false;}if(this.ladderCollider && !this.usingLadder){this.fPlayer.body.velocity.y=0;}//activar o desactivar sabores o cores de caramelos segun el numero en bodegaif(this.game.state.getCurrentState﻿().fFlavor1.text >0){	if(this.game.state.getCurrentState﻿().soltarStraberry){				this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot1, flavor:'straberry'});		this.game.state.getCurrentState﻿().soltarStraberry = false;	}this.fStraberryFlavor.inputEnabled = true;this.fStraberryFlavor.alpha = 1;}else{	this.fStraberryFlavor.inputEnabled = false;this.fStraberryFlavor.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor2.text >0){	if(this.game.state.getCurrentState﻿().soltarLemon){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot2, flavor:'lemon'});		this.game.state.getCurrentState﻿().soltarLemon = false;	}this.fLemonFlavor.inputEnabled = true;this.fLemonFlavor.alpha = 1;}else{		this.fLemonFlavor.inputEnabled = false;this.fLemonFlavor.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor3.text >0){	if(this.game.state.getCurrentState﻿().soltarBanana){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot3, flavor:'banana'});		this.game.state.getCurrentState﻿().soltarBanana = false;	}this.fBannaFlavor.inputEnabled = true;this.fBannaFlavor.alpha = 1;}else{	this.fBannaFlavor.inputEnabled = false;this.fBannaFlavor.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor4.text >0){	if(this.game.state.getCurrentState﻿().soltarChocolate){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot4, flavor:'chocolateJar'});		this.game.state.getCurrentState﻿().soltarChocolate = false;	}this.fChocolateCore.inputEnabled = true;this.fChocolateCore.alpha = 1;}else{	this.fChocolateCore.inputEnabled = false;this.fChocolateCore.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor5.text >0){	if(this.game.state.getCurrentState﻿().soltarChilli){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot5, flavor:'chiliJar'});		this.game.state.getCurrentState﻿().soltarChilli = false;	}this.fChiliCore.inputEnabled = true;this.fChiliCore.alpha = 1;}else{	this.fChiliCore.inputEnabled = false;this.fChiliCore.alpha = 0.2;}if(this.game.state.getCurrentState﻿().fFlavor6.text >0){	if(this.game.state.getCurrentState﻿().soltarCherry){		this.crearFlavorInstanciaAlone({pot:this.game.state.getCurrentState﻿().fFlavorPot6, flavor:'cherryJar'});		this.game.state.getCurrentState﻿().soltarCherry = false;	}this.fCherryCore.inputEnabled = true;this.fCherryCore.alpha = 1;}else{	this.fCherryCore.inputEnabled = false;this.fCherryCore.alpha = 0.2;}if(!this.insideElevator && this.fPlayer.y>182){if(this.fPlayer.y>182 && this.fAscensor1.y<325){	this.fAscensor1.body.velocity.y=30;}}if(this.fAscensor1.world.y<137){	this.fAscensor1.y = 137;	this.fAscensor1.body.velocity.y=0;	}if(this.fAscensor1.world.y>325){	this.fAscensor1.y = 325;	this.fAscensor1.body.velocity.y=0;	}if(this.fPlayer.myCoins<this.fKeyCost.text){ //costo de la llave	this.fKeyBuyBtn.tint =  0xBB2323;}else{	if(this.fPlayer.hasKey){		this.fKeyBuyBtn.tint =  0xBB2323;	}else{		this.canBuyKey = true;		this.fKeyBuyBtn.tint= 0xffffff;	}}if(this.fPlayer.myCoins<this.fRollValue.text && !this.fPlayer.hasBallMode){	this.fBallModeBtn.tint= 0xBB2323;}else{	this.canBuyBallMode =  true;	if(this.fPlayer.hasBallMode){		this.fBallModeBtn.tint= 0xBB2323;	}else{		this.fBallModeBtn.tint= 0xffffff;	}	}	if(this.fPlayer.myCoins < this.fGunValue.text ){ //costo de la pistola				this.fGunBuyBtn.tint = 0xBB2323;						//this.fGunBuyBtn.inputEnabled = false;	}else{			if(!this.fShootBtn.visible){				this.fGunBuyBtn.tint = 0xffffff;			}else{								this.fGunBuyBtn.tint = 0xBB2323;			}			//this.fGunBuyBtn.inputEnabled = true;	}	if(this.fPlayer.myCoins < this.fCannonValue.text){		this.fCannonBuyBtn.tint = 0xBB2323;			}else{			this.fCannonBuyBtn.tint = 0xffffff;	}	if(this.fPlayer.myCannons>0){ //si tiene algun cannon 		this.fDropCannonBtn.visible=true;	}else{		this.fDropCannonBtn.visible=false;	}			if(this.cannonCollinding){		this.fPickUpButton.visible =  true;			this.fChangeDirBtn.visible =  true;	}else{		this.fUpgradeCannon.visible = false;		this.fPickUpButton.visible =  false;			this.fChangeDirBtn.visible =  false;		}	if(!this.houseColliding){		this.fEnterHouseBtn.visible=false;	}if(!this.elevatorColliding){		this.fElevatorInn.visible=false;	}				if(this.fPlayer.body.touching.down && this.wannaJump && !this.doubleJumping){								this.fPlayer.body.velocity.y = -this.jumpingPower;				this.wannaJump = false;				this.jumping = true;				this.justJump = true;				this.fShootBtn.visible = false;	}	else if(this.fPlayer.body.touching.down  ){ //si el jugador esta topando algo abajo								if(this.justJump){				this.fPlayer.animations.play('idle');					this.fPlayer.body.drag.x=980;												this.justJump=false;				}								this.jumping = false;				if(this.fPlayer.hasPistol){					this.fShootBtn.visible = true; //re aparecer pistola en caso de que tenga despues de saltar				}			}	else if(this.doubleJumping){							this.doubleJumping = false;			this.doubleJump = false;			this.wannaJump = false;			}				if(this.jumping && this.doubleJump && this.wannaJump){								this.doubleJumping = true;								this.fPlayer.body.velocity.y = -this.jumpingPower;				var lastEmitter = this.fPlayer.game.state.getCurrentState﻿().LuckyEmitters.pop();							lastEmitter.destroy();				console.log('doubleJumpActivado');							}	};Level3.prototype.render = function () {	//this.game.debug.cameraInfo(this.game.camera, 32, 32);   // this.game.debug.geom(this.line1);//sthis.game.debug.body(this.fPlayer);	};