// -- user code here --		var musicEnabled = true;	var fxEnabled = true;/* --- start generated code --- */// Generated by  1.5.4 (Phaser v2.6.2)/** * Level1. */function Level1() {		Phaser.State.call(this);	}/** @type Phaser.State */var Level1_proto = Object.create(Phaser.State.prototype);Level1.prototype = Level1_proto;Level1.prototype.constructor = Level1;Level1.prototype.init = function () {		this.myInit();		this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;	this.scale.pageAlignHorizontally = true;	this.scale.pageAlignVertically = true;	};Level1.prototype.preload = function () {		this.myPreload();		this.load.pack('graphics', 'assets/pack.json');	this.load.pack('Fonts', 'assets/pack.json');	this.load.pack('animations', 'assets/pack.json');	};Level1.prototype.create = function () {	this.add.sprite(8.0, -89.0, 'wall');		this.add.sprite(641.0, 471.0, 'wall');		this.add.sprite(642.0, 1393.0, 'wall');		this.add.sprite(629.0, -2.0, 'divisor');		this.add.sprite(-4.0, 436.0, 'divisor');		this.add.sprite(1249.0, 131.0, 'wall2');		this.add.sprite(1250.0, 640.0, 'wall2');		var _wall3 = this.add.sprite(1251.0, 768.0, 'wall2');		this.add.sprite(23.0, 363.0, 'wall2');		this.add.sprite(23.0, 491.0, 'wall2');		this.add.sprite(716.0, 1500.0, 'window');		this.add.sprite(93.0, 1247.0, 'window');		this.add.sprite(25.0, 4.0, 'window');		this.add.sprite(718.0, 293.0, 'window');		var _window2 = this.add.sprite(478.0, 821.0, 'window');	_window2.scale.set(0.5, 0.5);		var _platforms = this.add.group();	_platforms.position.set(98.0, 460.0);		var _platform1 = this.add.sprite(343.0, 314.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform1);	_platform1.body.setSize(181.0, 24.60003662109375);	_platform1.body.moves = false;	_platform1.body.immovable = true;		var _platform2 = this.add.sprite(-91.0, 238.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform2);	_platform2.body.setSize(181.0, 24.60003662109375);	_platform2.body.moves = false;	_platform2.body.immovable = true;		var _platform3 = this.add.sprite(920.0, 448.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform3);	_platform3.body.setSize(181.0, 24.60003662109375);	_platform3.body.moves = false;	_platform3.body.immovable = true;		var _platform4 = this.add.sprite(-32.0, -47.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform4);	_platform4.body.setSize(181.0, 24.60003662109375);	_platform4.body.moves = false;	_platform4.body.immovable = true;		var _platform5 = this.add.sprite(895.0, -191.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform5);	_platform5.body.setSize(181.0, 24.60003662109375);	_platform5.body.moves = false;	_platform5.body.immovable = true;		var _platform6 = this.add.sprite(68.0, -257.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform6);	_platform6.body.setSize(181.0, 24.60003662109375);	_platform6.body.moves = false;	_platform6.body.immovable = true;		var _platform7 = this.add.sprite(680.0, 239.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform7);	_platform7.body.setSize(181.0, 24.60003662109375);	_platform7.body.moves = false;	_platform7.body.immovable = true;		var _platform8 = this.add.sprite(670.0, 612.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform8);	_platform8.body.setSize(181.0, 24.60003662109375);	_platform8.body.moves = false;	_platform8.body.immovable = true;		var _platform9 = this.add.sprite(357.0, -173.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform9);	_platform9.body.setSize(181.0, 24.60003662109375);	_platform9.body.moves = false;	_platform9.body.immovable = true;		var _platform10 = this.add.sprite(251.0, 118.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform10);	_platform10.body.setSize(181.0, 24.60003662109375);	_platform10.body.moves = false;	_platform10.body.immovable = true;		var _platform11 = this.add.sprite(955.0, 1070.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform11);	_platform11.body.setSize(181.0, 24.60003662109375);	_platform11.body.moves = false;	_platform11.body.immovable = true;		var _platform12 = this.add.sprite(18.0, 1012.0, 'platform1', null, _platforms);	this.game.physics.arcade.enable(_platform12);	_platform12.body.setSize(181.0, 24.60003662109375);	_platform12.body.moves = false;	_platform12.body.immovable = true;		var _floor1 = this.add.sprite(-100.0, 437.0, 'floor2', null, _platforms);	this.game.physics.arcade.enable(_floor1);	_floor1.body.moves = false;	_floor1.body.immovable = true;		var _floor2 = this.add.sprite(329.0, 867.0, 'floor2', null, _platforms);	this.game.physics.arcade.enable(_floor2);	_floor2.body.moves = false;	_floor2.body.immovable = true;		var _floor3 = this.add.sprite(538.0, -24.0, 'floor2', null, _platforms);	this.game.physics.arcade.enable(_floor3);	_floor3.body.moves = false;	_floor3.body.immovable = true;		var _floor4 = this.add.sprite(-101.0, 676.0, 'floor2', null, _platforms);	this.game.physics.arcade.enable(_floor4);	_floor4.body.moves = false;	_floor4.body.immovable = true;		var _floor5 = this.add.sprite(-106.0, 1162.0, 'floor2', null, _platforms);	this.game.physics.arcade.enable(_floor5);	_floor5.body.moves = false;	_floor5.body.immovable = true;		var _floor6 = this.add.sprite(546.0, 1204.0, 'floor2', null, _platforms);	this.game.physics.arcade.enable(_floor6);	_floor6.body.moves = false;	_floor6.body.immovable = true;		var _bigWall5 = this.add.sprite(562.0, 932.0, 'bigWall', null, _platforms);	_bigWall5.scale.set(-1.0, 1.0);	this.game.physics.arcade.enable(_bigWall5);	_bigWall5.body.moves = false;		this.add.sprite(-104.0, -464.0, 'bigWall', null, _platforms);		var _bigWall3 = this.add.sprite(1199.0, 427.0, 'bigWall', null, _platforms);	_bigWall3.scale.set(-1.0, 1.0);	this.game.physics.arcade.enable(_bigWall3);	_bigWall3.body.immovable = true;		var _bigWall2 = this.add.sprite(1199.0, -460.0, 'bigWall', null, _platforms);	_bigWall2.scale.set(-1.0, 1.0);	this.game.physics.arcade.enable(_bigWall2);	_bigWall2.body.immovable = true;		this.add.sprite(-97.0, 431.0, 'bigWall', null, _platforms);		var _groupCheer = this.add.group();		var _prizeBanner = this.add.sprite(-5.0, -128.0, 'prizeBanner', null, _groupCheer);		var _cheerUpText = this.add.bitmapText(172.0, -89.0, 'PixelFont', 'Excelent', 64, _groupCheer);		var _menuBtn = this.add.sprite(-1.0, 12.0, 'menuBtn');	_menuBtn.fixedToCamera = true;		var _enemies = this.add.group();	_enemies.position.set(-246.0, -59.0);		var _zombie1 = new zombie(this.game, 1104.0, 680.0);	_enemies.add(_zombie1);		var _zombie2 = new zombie(this.game, 409.0, 187.0);	_enemies.add(_zombie2);		var _zombie3 = new zombie(this.game, 776.0, 294.0);	_enemies.add(_zombie3);		var _zombie4 = new zombie(this.game, 393.0, 392.0);	_enemies.add(_zombie4);		var _zombie5 = new zombie(this.game, 1353.0, 443.0);	_enemies.add(_zombie5);		var _player = new player(this.game, 199.0, 845.0);	this.add.existing(_player);		var _shootBtn = this.add.sprite(30.0, 823.0, 'shootBtn');	_shootBtn.fixedToCamera = true;				// fields		this.fWall3 = _wall3;	this.fPlatforms = _platforms;	this.fPlatform1 = _platform1;	this.fPlatform2 = _platform2;	this.fPlatform3 = _platform3;	this.fPlatform4 = _platform4;	this.fPlatform5 = _platform5;	this.fPlatform6 = _platform6;	this.fPlatform7 = _platform7;	this.fPlatform8 = _platform8;	this.fPlatform9 = _platform9;	this.fPlatform10 = _platform10;	this.fPlatform11 = _platform11;	this.fPlatform12 = _platform12;	this.fGroupCheer = _groupCheer;	this.fPrizeBanner = _prizeBanner;	this.fCheerUpText = _cheerUpText;	this.fMenuBtn = _menuBtn;	this.fEnemies = _enemies;	this.fZombie1 = _zombie1;	this.fZombie2 = _zombie2;	this.fZombie3 = _zombie3;	this.fZombie4 = _zombie4;	this.fZombie5 = _zombie5;	this.fPlayer = _player;	this.fShootBtn = _shootBtn;			this.myCreate();	};/* --- end generated code --- */// -- user code here --Level1.prototype.myInit = function () {	};Level1.prototype.myPreload = function () {	this.game.load.audio('jumpBall', ['assets/audio/jump.mp3','assets/audio/jump.ogg']);			this.game.load.audio('BgMusic', ['assets/audio/BgMusic.mp3','assets/audio/BgMusic.ogg']);	this.game.load.audio('BgMusic2', ['assets/audio/BgMusic2.mp3','assets/audio/BgMusic2.ogg']);	this.game.load.audio('sonidoLevel', ['assets/audio/sonidoLevel.mp3','assets/audio/sonidoLevel.ogg']);	this.game.load.audio('shoot', ['assets/audio/shoot.mp3','assets/audio/shoot.ogg']);	};Level1.prototype.switchMusic = function () {		if(musicEnabled){		BgMusic.pause();		BgMusic2.pause();		musicEnabled = false;		console.log('musica disabled');			}else{			if(this.BgMusic = 1){			BgMusic.play();		}else{			BgMusic2.stop();		}				musicEnabled = true;			console.log('musica musicEnabled');	}	};Level1.prototype.switchFX = function () {		if(fxEnabled){	this.fxSounds.forEach(function(soundFx) { 			soundFx.mute = true;	},this);		fxEnabled = false;		console.log('fx disabled');			}else{		this.fxSounds.forEach(function(soundFx) { 		soundFx.mute = false;	},this);					fxEnabled = true;		console.log('fx enabled');	}	};Level1.prototype.manejarPausa = function () {  this.game.paused = true;       	var pauseBg = this.game.add.graphics(0, 0);				pauseBg.beginFill(0x2E610B, 0.6); 	    pauseBg.moveTo(0,0);	    pauseBg.lineTo(640, 0);	    pauseBg.lineTo(640, 960);	    pauseBg.lineTo(0, 960);	    pauseBg.lineTo(0, 0);	    pauseBg.endFill();	    this.Bg = this.game.add.sprite(0, 0, pauseBg.generateTexture());	    pauseBg.destroy();	    var pauseBgMenu = this.game.add.graphics(0, 0);	    pauseBgMenu.beginFill(0x2E610B); 	    pauseBgMenu.moveTo(0,0);	    pauseBgMenu.lineTo(524, 0);	    pauseBgMenu.lineTo(524, 330);	    pauseBgMenu.lineTo(0, 330);	    pauseBgMenu.lineTo(0, 0);	    pauseBgMenu.endFill();	    this.pauseBgMenu = this.game.add.sprite(this.game.width/2, this.game.height/2, pauseBgMenu.generateTexture());	    this.pauseBgMenu.anchor.setTo(0.5);	    pauseBgMenu.destroy();	    this.pauseIcons = this.game.add.sprite(0, 180, 'pauseIcons');	    this.OnBtn = this.game.add.sprite(220, 360, 'OnBtn');		this.OffMusic = this.game.add.sprite(220, 360, 'OffBtn');		this.OnFx = this.game.add.sprite(220, 430, 'OnBtn');		this.OffFx = this.game.add.sprite(220, 430, 'OffBtn');		this.HowToPlayBtn = this.game.add.sprite(220, 500, 'HowToPlayBtn');		this.QuitBtn = this.game.add.sprite(220, 570, 'QuitBtn');		if(musicEnabled){							  		this.OnBtn.visible = true;							   		this.OffMusic.visible = false;							   }else{								   	this.OnBtn.visible = false;								   	this.OffMusic.visible = true;							   }		if(fxEnabled){							  		this.OnFx.visible = true;							   		this.OffFx.visible = false;							   }else{								   	this.OnFx.visible = false;								   	this.OffFx.visible = true;							   }}Level1.prototype.unpause = function (event) {  if(this.game.paused){ 							  	var x1 = this.state.getCurrentState﻿().pauseBgMenu.x - this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		x2 = this.state.getCurrentState﻿().pauseBgMenu.x + this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		y1 = this.state.getCurrentState﻿().pauseBgMenu.y - this.state.getCurrentState﻿().pauseBgMenu.height/2;			  		y2 = this.state.getCurrentState﻿().pauseBgMenu.y + this.state.getCurrentState﻿().pauseBgMenu.height/2;			    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){			    						var mx1 = this.state.getCurrentState﻿().OffMusic.x;							mx2 = this.state.getCurrentState﻿().OffMusic.x + this.state.getCurrentState﻿().OffMusic.width;							my1 = this.state.getCurrentState﻿().OffMusic.y;							my2 = this.state.getCurrentState﻿().OffMusic.y + this.state.getCurrentState﻿().OffMusic.height;						var fx1 = this.state.getCurrentState﻿().OnFx.x;							fx2 = this.state.getCurrentState﻿().OnFx.x + this.state.getCurrentState﻿().OnFx.width;							fy1 = this.state.getCurrentState﻿().OnFx.y;							fy2 = this.state.getCurrentState﻿().OnFx.y + this.state.getCurrentState﻿().OnFx.height;						var hx1 = this.state.getCurrentState﻿().HowToPlayBtn.x;							hx2 = this.state.getCurrentState﻿().HowToPlayBtn.x + this.state.getCurrentState﻿().HowToPlayBtn.width;							hy1 = this.state.getCurrentState﻿().HowToPlayBtn.y;							hy2 = this.state.getCurrentState﻿().HowToPlayBtn.y + this.state.getCurrentState﻿().HowToPlayBtn.height;						var qx1 = this.state.getCurrentState﻿().QuitBtn.x;							qx2 = this.state.getCurrentState﻿().QuitBtn.x + this.state.getCurrentState﻿().QuitBtn.width;							qy1 = this.state.getCurrentState﻿().QuitBtn.y;							qy2 = this.state.getCurrentState﻿().QuitBtn.y + this.state.getCurrentState﻿().QuitBtn.height;						if(event.x > mx1 && event.x < mx2 && event.y > my1 && event.y < my2 ){ //boton de musica																  if(musicEnabled){									this.OnBtn.visible = false;							   		this.OffMusic.visible = true;							   								   }else{								   	this.OnBtn.visible = true;								   	this.OffMusic.visible = false;							   }	    										this.state.getCurrentState﻿().switchMusic(); 													}					if(event.x > fx1 && event.x < fx2 && event.y > fy1 && event.y < fy2 ){ //boton de fx																  if(fxEnabled){									this.OnFx.visible = false;							   		this.OffFx.visible = true;							   								   }else{								   	this.OnFx.visible = true;								   	this.OffFx.visible = false;							   }	    														this.state.getCurrentState﻿().switchFX(); 													}					if(event.x > hx1 && event.x < hx2 && event.y > hy1 && event.y < hy2 ){ //boton de how to play															this.game.cache.removeSound('BgMusic');						this.game.cache.removeSound('BgMusic2');						this.game.state.start('Instructions');						this.game.paused = false;									}					if(event.x > qx1 && event.x < qx2 && event.y > qy1 && event.y < qy2 ){ //boton de salir									console.log('quiting');						location.reload();									}			    	  }else{   				   				this.game.paused = false;			  	this.state.getCurrentState﻿().Bg.destroy();			  	this.state.getCurrentState﻿().pauseBgMenu.destroy();			  	this.state.getCurrentState﻿().pauseIcons.destroy();			  	this.state.getCurrentState﻿().OnBtn.destroy();			  	this.state.getCurrentState﻿().OffMusic.destroy();			  	this.state.getCurrentState﻿().OnFx.destroy();			  	this.state.getCurrentState﻿().OffFx.destroy();			  	this.state.getCurrentState﻿().HowToPlayBtn.destroy();			  	this.state.getCurrentState﻿().QuitBtn.destroy();			  }			  }}this.wannaShoot = false;Level1.prototype.swipeUpAction = function (pointer) {			this.swipeCoordX2 = pointer.x;  			this.swipeCoordY2 = pointer.y; 			var margenBalon = 60; 			this.fPlayer.body.drag.x=0;			console.log(this.fPlayer.body.drag.x);			this.PowerX = Math.abs(this.swipeCoordX - this.swipeCoordX2);			this.fPlayer.animations.play('walking');			if(this.PowerX >= this.maxPowerX){				this.fPlayer.animations.play('running');				this.PowerX = this.maxPowerX;			}else if(this.PowerX==0){				this.fPlayer.animations.play('idle');				if(this.wannaShoot){						//this.fPlayer.animations.play('shoot');						this.wannaShoot = false;				}				this.wannaShoot = true;			}			this.DirX = Math.sign(this.swipeCoordX - this.swipeCoordX2);				this.VectorX = this.DirX * this.PowerX;												if(!this.jumping && !this.doubleJumping ){									this.PowerY = Math.abs(this.swipeCoordY - this.swipeCoordY2);								}else if(this.doubleJump){												this.PowerY = Math.abs(this.swipeCoordY - this.swipeCoordY2);			}else{				this.PowerY = 0;				if(this.jumping){						this.fPlayer.animations.play('jumping');				}else{					this.fPlayer.animations.play('idle');				}							}			this.DirY = Math.sign(this.swipeCoordY - this.swipeCoordY2);				this.VectorY = this.DirY * this.PowerY;						if( this.PowerY > this.minJumpIntention && this.DirY == 1){ //si tiene intencion de salto				jumpBall.play('jumpBall');				this.fPlayer.animations.play('jumping2');				this.wannaJump = true;							}			if(this.VectorX!=0){									if(this.VectorX<0){							this.fPlayer.scale.x = 0.5;						}else{							this.fPlayer.scale.x = -0.5;						}								}			this.fPlayer.body.velocity.x = -this.VectorX*this.ExtraPowerX;									}Level1.prototype.myCreate = function () {		 this.game.world.setBounds(0, 0, 1280, 1920);	    this.game.camera.follow(this.fPlayer);    this.game.camera.deadzone = new Phaser.Rectangle(10, 10, 10, 10);this.fShootBtn.inputEnabled = true;this.fShootBtn.input.useHandCursor = true;this.fShootBtn.events.onInputDown.add(this.shoot, this);   this.weapon = this.game.add.weapon(40, 'bullet');   this.weapon.setBulletFrames(0, 80, true);    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;     this.weapon.bulletSpeed = 600;      this.weapon.fireRate = 125;     //  this.weapon.trackSprite(this.fPlayer, 0, 0, true);     	cursors = this.input.keyboard.createCursorKeys();    fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);    fireButton.onDown.add(this.shoot, this);    fireButton.onUp.add(function(){this.fPlayer.animations.play('idle')}, this);	this.game.sound.mute = false;	this.fMenuBtn.inputEnabled = true;	this.fMenuBtn.events.onInputUp.add(this.manejarPausa,this);  //pausar juego  	this.game.input.onDown.add(this.unpause, this); //quitar pausa					BgMusic = this.game.add.audio('BgMusic', 0.3); //agregar musica y volumen	BgMusic.allowMultiple = false;	BgMusic.loop = true;	BgMusic2 = this.game.add.audio('BgMusic2', 0.3); //agregar musica y volumen	BgMusic2.allowMultiple = false;	BgMusic2.loop = true;		var BgMusicSelector = Math.round(Math.random()) //agreagar musica de bg randomicamente	if(BgMusicSelector >= 0.5 && musicEnabled){		this.BgMusic = 1;		BgMusic.play();			}	if(BgMusicSelector <= 0.5 && musicEnabled){		this.BgMusic = 2;		BgMusic2.play();			}	jumpBall = this.game.add.audio('jumpBall');	jumpBall.allowMultiple = false;	jumpBall.addMarker('jumpBall', 0, 0.13	);	shoot = this.game.add.audio('shoot');	shoot.allowMultiple = false;	shoot.addMarker('shoot', 0, 0.3);	luckyBall = this.game.add.audio('luckyBall');	luckyBall.allowMultiple = false;	luckyBall.addMarker('luckyBall', 0, 0.619);	death = this.game.add.audio('death');	death.allowMultiple = false;	death.addMarker('death', 0, 2.26);	cortar = this.game.add.audio('cortar');	cortar.allowMultiple = false;	cortar.addMarker('cortar', 0, 0.92);	levelUpSound = this.game.add.audio('levelUpSound');	levelUpSound.allowMultiple = false;	levelUpSound.addMarker('levelUpSound', 0, 1.10);		this.fxSounds = [jumpBall,luckyBall,death, levelUpSound,cortar, shoot]; //agreagar aqui todos los sound fx que se necesita adminstrar	if(!fxEnabled){		this.fxSounds.forEach(function(soundFx) { 	 //en caso de que se deshabilite los sonidos fxs		soundFx.mute = true;	},this);	}			this.swipeCoordX = 0;	this.swipeCoordX2 = 0;	this.swipeCoordY = 0;	this.swipeCoordY2 = 0;	this.VectorX = 0;	this.VectorY = 0;	this.PowerX = 0	this.DirX = 0;	this.PowerY = 0	this.DirY = 0;	this.ExtraPowerY = 3;	this.ExtraPowerX = 3;	this.wannaJump = false;	this.minJumpIntention = 65;	this.maxPowerX = 90;	this.cascaritas = 0;	this.jumpingPower = 600;		this.game.input.onDown.add(function(pointer) { //manejo de swipe control de pantalla			this.swipeCoordX = pointer.x;  			this.swipeCoordY = pointer.y;   							}, this);   	this.game.input.onUp.add(this.swipeUpAction, this);  //manejo de swipe UP control de pantalla};Level1.prototype.shoot = function () {console.log('shooting');	shoot.play('shoot');this.fPlayer.animations.play('shooting');if(this.fPlayer.scale.x>0){	 this.weapon.trackSprite(this.fPlayer, 35, 10);this.weapon.fireAngle =  0;}else{	 this.weapon.trackSprite(this.fPlayer, -35, 10);	 this.weapon.fireAngle =  180;}	//this.weapon.bulletAngleOffset = 90; this.weapon.fire();//this.weapon.fire(this.fPlayer.x+(2*this.fPlayer.scale.x),this.fPlayer.y);}Level1.prototype.hitEnemy = function (bullet, enemy) {	console.log('enemy' + enemy);	enemy.tint = 0xE17FB2;	  timer = this.game.time.create(false);	  timer.loop(100, function normlaColor(){	  	enemy.tint = 0xffffff;	  	timer.destroy();	  }, this);	  timer.start();		bullet.kill();}Level1.prototype.update = function () {		this.game.physics.arcade.collide(this.fPlayer , this.fPlatforms);	this.game.physics.arcade.collide(this.fEnemies , this.fPlatforms);	this.game.physics.arcade.overlap(this.fPlayer , this.fEnemies);	this.game.physics.arcade.overlap(this.weapon.bullets, this.fEnemies, this.hitEnemy, null, this);		if(this.fPlayer.body.touching.down && this.wannaJump && !this.doubleJumping){								this.fPlayer.body.velocity.y = -this.jumpingPower;				this.wannaJump = false;				this.jumping = true;				this.justJump = true;	}	else if(this.fPlayer.body.touching.down ){ //si el jugador esta topando algo abajo								if(this.justJump){				this.fPlayer.animations.play('idle');					this.fPlayer.body.drag.x=980;												this.justJump=false;				}								this.jumping = false;			}	else if(this.doubleJumping){							this.doubleJumping = false;			this.doubleJump = false;			this.wannaJump = false;			}				if(this.jumping && this.doubleJump && this.wannaJump){								this.doubleJumping = true;								this.fPlayer.body.velocity.y = -this.jumpingPower;				var lastEmitter = this.fPlayer.game.state.getCurrentState﻿().LuckyEmitters.pop();							lastEmitter.destroy();				console.log('doubleJumpActivado');							}	};Level1.prototype.deathAnimation = function () {	BgMusic.stop();	BgMusic2.stop();	this.game.time.events.add(Phaser.Timer.SECOND * 2, pantallaLose, this);function pantallaLose(){	this.GameOverScreen = this.game.add.sprite(0, 0, 'GameOverScreen');	this.GameOverScreen.alpha = 0.1;	this.game.add.tween(this.GameOverScreen).to( { alpha: 1 }, 500, Phaser.Easing.Linear.None, true);	this.againBtn = this.game.add.sprite(this.game.width/2, this.game.height/2+130, 'againBtn');	this.againBtn.anchor.setTo(0.5, 0.5);	this.score = this.game.add.bitmapText(this.game.width/2, this.game.height/2-5, 'PixelFont', this.fTime.text, 64);	this.score.anchor.setTo(0.5, 0.5);	this.againBtn.inputEnabled = true;	this.againBtn.events.onInputUp.add(function(pointer) {		this.game.state.restart(this.CurrentState);		this.game.time.reset();	   	}, this);  	} // this.game.time.events.add(Phaser.Timer.SECOND * 2, reiniciarNivel, this);function reiniciarNivel(){this.game.state.restart(this.CurrentState);this.game.time.reset();}};Level1.prototype.render = function () {// this.game.debug.geom(this.line1);//sthis.game.debug.body(this.fPlayer);this.game.debug.cameraInfo(this.game.camera, 32, 32);    	};