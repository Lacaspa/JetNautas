
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * player3
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
 */
function player3(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'atlas', aFrame == undefined || aFrame == null? 'idle0000' : aFrame);
	this.scale.set(0.5, 0.5);
	this.pivot.set(0.0, 2.0);
	this.anchor.set(0.5, 0.5);
	this.animations.add('idle', ['idle0000', 'idle0001', 'idle0002', 'idle0003', 'idle0004', 'idle0005', 'idle0006', 'idle0007', 'idle0008', 'idle0009', 'idle0010', 'idle0011', 'idle0012', 'idle0013', 'idle0014', 'idle0015', 'idle0016', 'idle0017', 'idle0018', 'idle0019', 'idle0020', 'idle0021', 'idle0022', 'idle0023', 'idle0024', 'idle0025', 'idle0026', 'idle0027', 'idle0028', 'idle0029'], 30, true);
	this.animations.add('running', ['running0000', 'running0001', 'running0002', 'running0003', 'running0004', 'running0005', 'running0006', 'running0007', 'running0008', 'running0009', 'running0010', 'running0011', 'running0012', 'running0013', 'running0014', 'running0015', 'running0016', 'running0017', 'running0018', 'running0019', 'running0020', 'running0021', 'running0022', 'running0023', 'running0024'], 50, true);
	this.animations.add('jumping', ['jumping instancia 10000'], 1, true);
	this.animations.add('jumping2', ['jumping2 instancia 10000'], 1, true);
	this.animations.add('walking', ['walking instancia 10000', 'walking instancia 10001', 'walking instancia 10002', 'walking instancia 10003', 'walking instancia 10004'], 10, true);
	this.animations.add('shoot', ['shoot0000', 'shoot0001', 'shoot0002', 'shoot0003', 'shoot0004', 'shoot0005', 'shoot0006', 'shoot0007', 'shoot0008', 'shoot0009', 'shoot0010', 'shoot0011', 'shoot0012', 'shoot0013', 'shoot0014', 'shoot0015', 'shoot0016', 'shoot0017', 'shoot0018', 'shoot0019', 'shoot0020', 'shoot0021', 'shoot0022', 'shoot0023', 'shoot0024', 'shoot0025', 'shoot0026', 'shoot0027', 'shoot0028', 'shoot0029'], 75, false);
	var _anim_shooting = this.animations.add('shooting', ['shooting0000', 'shooting0001', 'shooting0002', 'shooting0003', 'shooting0004', 'shooting0005'], 30, true);
	_anim_shooting.play();
	this.game.physics.arcade.enable(this);
	this.body.gravity.y = 800.0;
	
	// fields
	
	this.fIdle0000 = this;
	
	this.afterCreate(_anim_shooting);
	
}

/** @type Phaser.Sprite */
var player3_proto = Object.create(Phaser.Sprite.prototype);
player3.prototype = player3_proto;
player3.prototype.constructor = player3;

/* --- end generated code --- */
// -- user code here --

player3.prototype.afterCreate = function(_anim_shooting) {
	this.animations.play('idle');	
	_anim_shooting.onLoop.add(this.animationStopped, this);
	
	
};

player3.prototype.animationStopped = function(sprite, animation) {

	this.game.state.getCurrentStateï»¿().shoot();
};
