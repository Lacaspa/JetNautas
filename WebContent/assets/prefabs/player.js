
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * player
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
 */
function player(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'atlas3', aFrame == undefined || aFrame == null? 'idle instancia 10000' : aFrame);
	this.anchor.set(0.5, 0.5);
	this.animations.add('idle', ['idle1 instancia 10000', 'idle1 instancia 10001', 'idle1 instancia 10002', 'idle1 instancia 10003', 'idle1 instancia 10004', 'idle1 instancia 10005', 'idle1 instancia 10006', 'idle1 instancia 10007', 'idle1 instancia 10008', 'idle1 instancia 10009', 'idle1 instancia 10010'], 12, true);
	this.animations.add('running', ['running instancia 10000', 'running instancia 10001', 'running instancia 10002', 'running instancia 10003', 'running instancia 10004', 'running instancia 10005', 'running instancia 10006', 'running instancia 10007', 'running instancia 10008', 'running instancia 10009', 'running instancia 10010', 'running instancia 10011', 'running instancia 10012', 'running instancia 10013', 'running instancia 10014', 'running instancia 10015', 'running instancia 10016', 'running instancia 10017', 'running instancia 10018', 'running instancia 10019', 'running instancia 10020'], 48, true);
	this.animations.add('walking', ['walking instancia 10000', 'walking instancia 10001', 'walking instancia 10002', 'walking instancia 10003', 'walking instancia 10004', 'walking instancia 10005', 'walking instancia 10006', 'walking instancia 10007', 'walking instancia 10008', 'walking instancia 10009', 'walking instancia 10010', 'walking instancia 10011', 'walking instancia 10012', 'walking instancia 10013', 'walking instancia 10014', 'walking instancia 10015', 'walking instancia 10016'], 32, true);
	this.animations.add('jumping', ['falling0000', 'falling0001', 'falling0002', 'falling0003', 'falling0004'], 48, true);
	this.animations.add('jumping2', ['jumping2 instancia 10000', 'jumping2 instancia 10001', 'jumping2 instancia 10002', 'jumping2 instancia 10003', 'jumping2 instancia 10004', 'jumping2 instancia 10005', 'jumping2 instancia 10006', 'jumping2 instancia 10007', 'jumping2 instancia 10008', 'jumping2 instancia 10009'], 48, true);
	var _anim_shooting = this.animations.add('shoot', ['shooting instancia 10000', 'shooting instancia 10001', 'shooting instancia 10002'], 24, true);
	this.animations.add('shooting', ['shooting instancia 10000', 'shooting instancia 10001', 'shooting instancia 10002', 'shooting instancia 10003'], 12, true);
	this.animations.add('climbing', ['climbing instancia 10000', 'climbing instancia 10001', 'climbing instancia 10002', 'climbing instancia 10003', 'climbing instancia 10004', 'climbing instancia 10005', 'climbing instancia 10006', 'climbing instancia 10007', 'climbing instancia 10008', 'climbing instancia 10009'], 24, true);
	this.animations.add('stopClimb', ['climbing instancia 10009'], 1, true);
	var _anim_shuperShot = this.animations.add('shuperShot', ['megaShoot instancia 10000', 'megaShoot instancia 10001', 'megaShoot instancia 10002', 'megaShoot instancia 10003', 'megaShoot instancia 10004', 'megaShoot instancia 10005', 'megaShoot instancia 10006', 'megaShoot instancia 10007', 'megaShoot instancia 10008', 'megaShoot instancia 10009', 'megaShoot instancia 10010', 'megaShoot instancia 10011', 'megaShoot instancia 10012', 'megaShoot instancia 10013', 'megaShoot instancia 10014', 'megaShoot instancia 10015', 'megaShoot instancia 10016', 'megaShoot instancia 10017', 'megaShoot instancia 10018', 'megaShoot instancia 10019', 'megaShoot instancia 10020', 'megaShoot instancia 10021', 'megaShoot instancia 10022', 'megaShoot instancia 10023', 'megaShoot instancia 10024', 'megaShoot instancia 10025', 'megaShoot instancia 10026', 'megaShoot instancia 10027', 'megaShoot instancia 10028', 'shooting instancia 10000', 'shooting instancia 10001', 'shooting instancia 10002', 'shooting instancia 10003'], 32, false);
	_anim_shuperShot.play();
	this.game.physics.arcade.enable(this);
	this.body.setSize(22.02295970916748, 54.81462860107422, 8.333687782287598, 0.0);
	this.body.collideWorldBounds = true;
	this.body.bounce.y = 0.2;
	this.body.gravity.y = 800.0;
	
	// fields
	
	this.fMainChar = this;
	
		this.afterCreate(_anim_shooting);
	
}

/** @type Phaser.Sprite */
var player_proto = Object.create(Phaser.Sprite.prototype);
player.prototype = player_proto;
player.prototype.constructor = player;

/* --- end generated code --- */
// -- user code here --
player.prototype.afterCreate = function(_anim_shooting) {
	
	this.hasBallMode = false;
	this.myWeapons = 0;
	this.myCannons = 0;
	this.myCannonsUpgrades = [];
	this.myCoins = 10;
	this.hasKey = false;
	this.hasPistol =  false;
	this.animations.play('idle');	
	_anim_shooting.onLoop.add(this.animationStopped, this);
	this.life = 200;
	this.playerBall = this.game.add.sprite(this.x,this.y,'playerBall',null);
	this.playerBall.anchor.set(0.5, 0.5);
	this.ballMode =  false;
    this.game.physics.arcade.enable(this.playerBall);
    this.enableObstacleCollide = true;
	this.playerBall.alpha = 0;
   // this.playerBall.body.gravity.y = 800.0;
	
};

player.prototype.animationStopped = function(sprite, animation) {

	this.game.state.getCurrentState﻿().shoot();
};
player.prototype.ballModeSwitch = function() {
	if(this.hasBallMode){

		if(this.ballMode){
			this.alpha=0;
			this.playerBall.alpha = 100;
			 this.enableObstacleCollide = false;
		}else{
			
			this.alpha=100;
			this.playerBall.alpha = 0;
			 this.enableObstacleCollide = true;
		}
	}
}
player.prototype.update = function() {

	
	this.playerBall.x=this.x;
	this.playerBall.y=this.y+13;
	this.playerBall.body.angularVelocity=900*Math.sign(this.body.velocity.x);
	
	//this.game.physics.arcade.collide(this.playerBall , this.game.state.getCurrentState﻿().fPlatforms);
};

