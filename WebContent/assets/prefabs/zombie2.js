
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * zombie2
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
 */
function zombie2(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'atlas2', aFrame == undefined || aFrame == null? 'idle0000' : aFrame);
	this.scale.set(0.5, 0.5);
	this.anchor.set(0.5, 0.5);
	var _anim_idle = this.animations.add('idle', ['idle0000', 'idle0001', 'idle0002', 'idle0003', 'idle0004', 'idle0005', 'idle0006', 'idle0007', 'idle0008', 'idle0009'], 12, true);
	this.animations.add('walking', ['walk0000', 'walk0001', 'walk0002', 'walk0003', 'walk0004', 'walk0005', 'walk0006', 'walk0007', 'walk0008', 'walk0009'], 6, true);
	_anim_idle.play();
	this.game.physics.arcade.enable(this);
	this.body.setSize(80.0, 114.6510238647461);
	this.body.collideWorldBounds = true;
	this.body.gravity.y = 980.0;
	this.currentPlatform = null;
	this.isNewPlatform = false;
	
		this.afterCreate();
	
}

/** @type Phaser.Sprite */
var zombie2_proto = Object.create(Phaser.Sprite.prototype);
zombie2.prototype = zombie2_proto;
zombie2.prototype.constructor = zombie2;

/* --- end generated code --- */
// -- user code here --
zombie2.prototype.afterCreate = function() {
	
	this.life=20;
	

	this.animations.play('walking');
	

	    
};
zombie2.prototype.diceCerebro = function() {
	
	var probabilidaddeHablar = Math.random()*10;
	if(probabilidaddeHablar>9){
		brainsAudio.play('brainsAudio');
		
	}
	
}


zombie2.prototype.update = function() {
	
this.game.physics.arcade.collide(this, this.game.state.getCurrentState﻿().fPlatforms, this.addZombietoPlatform, null, this);

if(this.x>860){
console.log('destroying');
this.game.state.getCurrentState﻿().zombiesPorEliminar--;
if(this.game.state.getCurrentState﻿().zombiesPorEliminar<=0){
	console.log('ultimoZombieEliminado');
	this.game.state.getCurrentState﻿().ultimoZobieEliminado = true;
}	
this.destroy();

}

}
zombie2.prototype.addZombietoPlatform = function(me,platform){
	if(this.currentPlatform !=  platform){
		
		if(this.currentPlatform!=null){
		var index = this.currentPlatform.data.zombiesWalking.indexOf(this);
   		console.log("index "  + index)
			if (index > -1) {
			  this.currentPlatform.data.zombiesWalking.splice(index, 1); //retiro el zombie de la plataforma para que no sigan disparando las gallinas 
			}
		}
		this.currentPlatform =  platform;
		platform.data.zombiesWalking.push(this);
		this.isNewPlatform =  true;

	}
	
	if(platform.data.direction){
		this.body.velocity.x=15;
		this.scale.x =0.5; 
	}else{
		this.body.velocity.x=-15;
		this.scale.x =-0.5; 
	}
}
