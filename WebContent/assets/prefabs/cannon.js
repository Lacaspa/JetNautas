
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * cannon
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
 */
function cannon(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'atlas4', aFrame == undefined || aFrame == null? 'cannon0000' : aFrame);
	this.animations.add('level0', ['cannonL10000', 'cannonL10001', 'cannonL10002', 'cannonL10003', 'cannonL10004', 'cannonL10005', 'cannonL10006', 'cannonL10007', 'cannonL10008', 'cannonL10009', 'cannonL10010', 'cannonL10011'], 12, true);
	this.animations.add('level1', ['cannon0000', 'cannon0001', 'cannon0002', 'cannon0003', 'cannon0004', 'cannon0005', 'cannon0006', 'cannon0007', 'cannon0008', 'cannon0009', 'cannon0010', 'cannon0011'], 12, true);
	var _anim_level2 = this.animations.add('level2', ['cannonL20000', 'cannonL20001', 'cannonL20002', 'cannonL20003', 'cannonL20004', 'cannonL20005', 'cannonL20006', 'cannonL20007', 'cannonL20008', 'cannonL20009', 'cannonL20010', 'cannonL20011', 'cannonL20000', 'cannonL20001', 'cannonL20002', 'cannonL20003', 'cannonL20004', 'cannonL20005', 'cannonL20006', 'cannonL20007', 'cannonL20008', 'cannonL20009', 'cannonL20010', 'cannonL20011'], 12, true);
	_anim_level2.play();
	this.game.physics.arcade.enable(this);
	this.body.gravity.y = 800.0;
	
	// fields
	
	this.fCannon0000 = this;
	
	this.myCreate();
	
}

/** @type Phaser.Sprite */
var cannon_proto = Object.create(Phaser.Sprite.prototype);
cannon.prototype = cannon_proto;
cannon.prototype.constructor = cannon;

/* --- end generated code --- */
// -- user code here --

cannon.prototype.myCreate = function() {
	
	this.upgrading = false;
	this.cannonlevel = 1;
	this.upgradeCost = 45;
	this.fireRate = 1000;
	
	this.shoot =  false;
	this.weapon = this.game.add.weapon(40, 'bullet');
	
    this.weapon.setBulletFrames(0, 40, true);

    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;
    this.weapon.bulletSpeed = 600;
    
    
	 this.WeaponDir = 1;
	 this.oldYdistance = 0;
	 
	 this.weapon.fireRate = this.fireRate;
	 this.checkCannonLevel();
	
	 this.weapon.fireAngle =  0;
	 this.changeDirection();
}

cannon.prototype.upgradeLevel = function() {
	
	var upgradeBar1 = new upgradeBar(this.game, this.x+(20*this.WeaponDir), this.y-10);
	this.game.add.existing(upgradeBar1);
	this.updating = upgradeBar1.animations.play('updating');
	this.upgrading = true;
	
	this.game.state.getCurrentState﻿().fPickUpButton.tint = 0xBB2323;
	this.game.state.getCurrentState﻿().fPickUpButton.inputEnabled = false;
	this.game.state.getCurrentState﻿().fChangeDirBtn.tint = 0xBB2323;
	this.game.state.getCurrentState﻿().fChangeDirBtn.inputEnabled = false;
	
	this.updating.onComplete.add(function(){
		this.game.state.getCurrentState﻿().fPickUpButton.tint = 0xFFFFFF;
		this.game.state.getCurrentState﻿().fPickUpButton.inputEnabled = true;
		this.game.state.getCurrentState﻿().fChangeDirBtn.tint = 0xFFFFFF;
		this.game.state.getCurrentState﻿().fChangeDirBtn.inputEnabled = true;
		 this.upgrading =  false;
		 this.cannonlevel ++;
		 this.weapon.fireRate = 1000/this.cannonlevel;
		 
		 upgradeBar1.destroy();
			this.checkCannonLevel();
		}, this);
	
	 this.upgradeCost *= this.cannonlevel;
	
}

cannon.prototype.checkCannonLevel = function() {
	
	 this.weapon.fireRate = 1000/this.cannonlevel;
	 if(this.cannonlevel>=3){
		 this.cannonlevel = 3
	 }
	 
	switch(this.cannonlevel){
	
		case 1:
			this.animations.play('level0')
			break;
		case 2:
			this.animations.play('level1')
			break;
		case 3:
			this.animations.play('level2')
			break;
		
		
	}
	
}

cannon.prototype.fireIfZombie = function(me,platform){

	if(platform.data.zombiesWalking.length>0){
		
		this.shoot = true;
	}else{
		this.shoot = false;
	}
/*
	
	if(platform.data.direction){

		this.scale.x =-1; 
		
		this.WeaponDir = -1;
		
	}else{

		this.scale.x =+1; 
		this.WeaponDir = 1;
	}
	*/
	
}
cannon.prototype.changeDirection = function() {
	this.WeaponDir*=-1;
	this.scale.x*=-1;
	this.weapon.trackSprite(this, 35*this.WeaponDir, 30);
	this.weapon.bulletSpeed = 300*this.WeaponDir;
	
}

cannon.prototype.update = function() {

	
	 if(this.shoot && !this.upgrading){
		
		 this.weapon.fire();
		 
		}
	
	
	//this.colliden = this.game.physics.arcade.collide(this , this.game.state.getCurrentState﻿().fPlatforms, this.fireIfZombie, null, this);

	this.game.physics.arcade.overlap(this.weapon.bullets, this.game.state.getCurrentState﻿().fEnemies, this.game.state.getCurrentState﻿().hitEnemy, null, this);
	this.game.physics.arcade.overlap(this.weapon.bullets, this.game.state.getCurrentState﻿().fPlatforms, this.game.state.getCurrentState﻿().hitWall, null, this);

	
}
